/*! bargolfstars - 2.0.0 - 2013-10-29 */
var BGS = new Marionette.Application();

BGS.Controller = Parse.Router.extend({
    routes: {
        "": "default"
    },
    initialize: function() {
        BGS.routeHistory = [];
        var a = this;
        Parse.history.bind("all", function() {
            a.storeRoute(window.location.hash);
        });
    },
    storeRoute: function(a) {
        BGS.routeHistory.push(a);
    },
    previousRoute: function() {
        BGS.routeHistory.length > 1 ? (this.navigate(BGS.routeHistory[BGS.routeHistory.length - 2], {
            trigger: !1,
            replace: !0
        }), BGS.routeHistory.pop()) : this.navigate("", {
            trigger: !1,
            replace: !0
        });
    },
    resetNavController: function() {
        BGS.Utilities.navController = new BackStack.StackNavigator({
            el: "#nav-container"
        });
    },
    "default": function() {},
    showView: function(a, b, c) {
        setTimeout(function() {
            BGS.Utilities.navController.pushView(a, {}, b);
        }, 0), $.isFunction(c) && c();
    },
    popView: function(a) {
        BGS.Utilities.navController.popView(a), BGS.controller.previousRoute(), BGS.MainApp.Main.Controller.hideSpinner();
    },
    noEffect: function() {
        return new BackStack.NoEffect();
    },
    fadeEffect: function() {
        return new BackStack.FadeEffect();
    }
}), window.addEventListener("load", function() {
    console.log("window load event called"), BGS.Utilities.templateLoader.load([ "start", "welcome", "login", "signup", "main", "username", "forgot-password", "left-panel", "activity", "leaderboard", "player", "places-list", "places-map", "places-map-layout", "places-map-menu", "bar-list-item", "taxi-list-item", "round-setup-options", "round-setup-item-list", "round-setup-item-list-player", "round-setup-item-list-hole", "round-setup-item-list-rule", "list-layout", "round-setup-player-data", "round-setup-rule-data", "places-manual-entry-hole-data", "scorecard-layout", "scorecard-player-list", "scorecard-player-list-item", "scorecard-hole-name-list", "scorecard-hole-score-list", "scorecard-hole-name-list-item", "scorecard-hole-score-list-item", "scorecard-enter-score-data", "scorecard-data-score-list", "scorecard-data-score-list-item", "scorecard-breakdown-list-item", "scorecard-scoring-breakdown-data", "rule-value", "handicap", "address-bar" ], function() {
        BGS.controller = new BGS.Controller(), $("#qunit").trigger("templatesLoaded"), Parse.history.start();
        var a = BGS.StartApp.Start.Controller, b = function() {
            console.log("documentDeviceReady called"), a.initialize(), a.mobileInits();
        };
        BGS.Utilities.isPhonegap() ? document.addEventListener("deviceready", b, !1) : a.initialize();
    }), new FastClick(document.body);
}, !1), BGS.start(), BGS.module("FoursquareAPI", function(a, b, c, d, e, f) {
    this.fsqInitialize = function() {
        var a = new e.Deferred();
        return b.Utilities.retrieveAPIInfoFromParse("foursquare", function(c) {
            b.Utilities.fsqIsInitialized = !0, a.resolve(c);
        }), a.promise();
    }, this.getCategoryIds = function() {
        return [ "4bf58dd8d48988d1e8931735", "4bf58dd8d48988d1e3931735", "50327c8591d4c4b30a586d5d", "4e0e22f5a56208c4ea9a85a0", "4bf58dd8d48988d155941735", "4d4b7105d754a06376d81259", "4bf58dd8d48988d116941735", "4bf58dd8d48988d117941735", "4bf58dd8d48988d11e941735", "4bf58dd8d48988d118941735", "4bf58dd8d48988d1d8941735", "4bf58dd8d48988d1d5941735", "4bf58dd8d48988d120941735", "4bf58dd8d48988d121941735", "4bf58dd8d48988d11f941735", "4bf58dd8d48988d11b941735", "4bf58dd8d48988d1d4941735", "4bf58dd8d48988d11d941735", "4bf58dd8d48988d122941735", "4bf58dd8d48988d123941735", "4bf58dd8d48988d14c941735", "4bf58dd8d48988d1db931735" ];
    }, this.fsqGetDefaultBarOptions = function() {
        var a = {
            radius: 3200,
            limit: 20,
            intent: "browse",
            categoryId: this.getCategoryIds()
        };
        return a;
    }, this.fsqClearBarCache = function() {
        b.FoursquareAPI.fsqGetNearbyResults.barCache && (b.FoursquareAPI.fsqGetNearbyResults.barCache = null);
    }, this.fsqGetNearbyResults = function(a, c) {
        var d = this, g = a.searchType, h = a.searchTerm, i = a.refresh, j = a.showAddressBar, k = new e.Deferred();
        return !b.FoursquareAPI.fsqGetNearbyResults.barCache || f.isObject(b.FoursquareAPI.fsqGetNearbyResults.barCache) === !1 && void 0 === b.FoursquareAPI.fsqGetNearbyResults.barCache.length || h === !0 || i === !0 || void 0 === this.userLocation ? (console.log("foursquare resetting cache and requerying"), 
        b.FoursquareAPI.fsqGetNearbyResults.barCache = {}, b.Utilities.getCurrentLocation(c).then(function(a) {
            d.userLocation = a, b.GoogleAPI.googleGetUsersAddress(a, j, function() {
                b.FoursquareAPI.fsqInitialize().then(function(c) {
                    b.FoursquareAPI.fsqCreateRequestAuthorizationObjects(c).then(function(c, d) {
                        var e = new b.Entities.FoursquarePlaceCollection({
                            type: g,
                            endpoint: c,
                            authString: d,
                            isManualSearch: void 0 !== h ? !0 : !1,
                            options: {
                                location: a,
                                query: h
                            }
                        });
                        e.fetch({
                            success: function() {
                                return 0 === e.length ? (k.reject("Your search yielded no results."), void 0) : (b.FoursquareAPI.fsqGetNearbyResults.barCache = e, 
                                k.resolve(e, isCached = !1, a), void 0);
                            },
                            error: function(a) {
                                console.log("places.fetch e 1 " + JSON.stringify(a)), k.reject("Please try your request again.");
                                var b = "undefined" != typeof a.code ? "" + a.code : "" + a;
                                Parse.Analytics.track("error", {
                                    code: b
                                });
                            }
                        });
                    });
                });
            });
        }, function(a) {
            console.log("There was an error getting your location: " + a), k.reject(JSON.stringify(a));
        }), setTimeout(function() {
            "pending" == k.state() && k.reject("Operation timed out. Do you have an internet connection?");
        }, 3e4), k.promise()) : (console.log("foursquare should reuse cache"), k.resolve(b.FoursquareAPI.fsqGetNearbyResults.barCache, isCached = !0, this.userLocation), 
        j !== !1 && b.MainApp.Main.Controller.showAddressBar(), k.promise());
    }, this.fsqGetPlaceDetail = function() {
        console.log("foursquare.js fsqGetPlaceDetail:");
    }, this.fsqCreateRequestAuthorizationObjects = function(a) {
        var b = new e.Deferred(), c = a;
        if ("foursquare" == c.apiName) {
            var d = "", f = "", g = "", h = "", i = "";
            c.clientIdKeyName && (d = c.clientIdKeyName), c.clientId && (f = c.clientId), c.clientSecretKeyName && (g = c.clientSecretKeyName), 
            c.clientSecret && (h = c.clientSecret), c.dateVerified && (i = c.dateVerified);
            var j = "&" + d + "=" + f + "&" + g + "=" + h;
            j = j + "&v=" + i;
            var k;
            c.apiEndpoint && (k = c.apiEndpoint), b.resolve(k, j);
        }
        return b.promise();
    }, this.fsqBuildParameterList = function(a) {
        var b = "";
        f.each(a, function(a, c) {
            if ("" !== a && null !== a) if ("location" == c) {
                var d = a.lat, e = a.lng;
                b = "?ll=" + d + "," + e + "&" + b;
            } else b = b + c + "=" + a + "&";
        });
        var c = b.substring(0, b.length - 1);
        return c;
    };
}), BGS.module("FacebookAPI", function(a, b, c, d, f) {
    this.initializeParseFBUtils = function() {
        console.log("FacebookAPI initializeParseFBUtils:"), this.fbIsInitialized = !1;
        var a = b.FacebookAPI;
        if ("undefined" != typeof FB && b.FacebookAPI.fbIsInitialized !== !0) try {
            Parse.FacebookUtils.init({
                appId: "109998089149025",
                nativeInterface: CDV.FB,
                status: !0,
                cookie: !0,
                xfbml: !0,
                useCachedDialogs: !1
            }), a.fbIsInitialized = !0, this.authUser(), f("#qunit").trigger("facebookInit");
        } catch (c) {
            a.fbIsInitialized = !1, console.log("The Facebook JavaScript SDK must be loaded & not initialized before calling Parse.FacebookUtils.init."), 
            console.log("catch error: " + c);
        } else console.log("FB did not load properly"), console.log("The Facebook JavaScript SDK must be loaded & not initialized before calling Parse.FacebookUtils.init."), 
        a.fbIsInitialized = !1;
    }, this.facebookLogin = function() {
        console.log("FacebookAPI facebookLogin:"), "undefined" == typeof FB || b.FacebookAPI.fbIsInitialized === !1 ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Facebook Error", "Shoot, we're sorry. Something happened trying to contact Facebook. Try completely closing Bar Golf Stars and reopening.", !0, !0), 
        b.FacebookAPI.fbIsInitialized = !1) : this.attemptFBLogin();
    }, this.authUser = function() {
        console.log("FacebookAPI: authUser"), FB.Event.subscribe("auth.statusChange", this.handleStatusChange);
    }, this.handleStatusChange = function(a) {
        console.log("FacebookAPI: handleStatusChange"), a.authResponse ? FB.api("/me", {
            fields: "id, name, picture, email"
        }, function(a) {
            a.e ? (console.log("Error getting user info: " + JSON.stringify(a.e)), a.e.e_subcode && "458" == a.e.e_subcode && setTimeout(function() {
                console.log("The app was removed. Please log in again.");
            }, 0), b.StartApp.Start.Controller.logOut()) : console.log("handleStatusChange Got the user's name, picture and email: " + JSON.stringify(a));
        }) : console.log("User has not connected to BGS via Facebook");
    }, this.checkFBUserPermissions = function(a) {
        console.log("FacebookAPI: checkFBUserPermissions");
        var b = "SELECT " + fbPermissions.join() + " FROM permissions WHERE uid = me()";
        FB.api("/fql", {
            q: b
        }, function(b) {
            return a ? (console.log("checkUserPermissions permissiontocheck"), 1 == b.data[0][a] ? (console.log("The '" + a + "' permission has been granted.", !1), 
            !0) : (console.log("You need to grant the " + a + " permission before using this functionality.", !1), 
            !1)) : !0;
        });
    }, this.attemptFBLogin = function() {
        console.log("FacebookAPI: attemptFBLogin");
        var a = this;
        FB.login(function(b) {
            console.log("FB.login returned response: " + JSON.stringify(b)), a.fbLogIntoParse(b);
        }, {
            scope: "read_stream"
        });
    }, this.useParseFBLogin = function() {
        b.MainApp.Main.Controller.showSpinner("Logging in..."), Parse.FacebookUtils.logIn("publish_actions, email, read_stream", {
            success: function(a) {
                a.existed() ? (console.log("User logged in through Facebook!"), b.StartApp.Start.Controller.loadMainAppWithSuccess()) : FB.api("/me", {
                    fields: "id, name, picture, email"
                }, function(c) {
                    if (c.e) {
                        console.log("Parse facebook utils FB.api response.e: " + JSON.stringify(c.e)), console.log("Oops something went wrong with facebook."), 
                        b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error", e.message, !0, !0), 
                        a.destroy(), b.StartApp.Start.Controller.logOut();
                        var d = "undefined" != typeof c.e.code ? "" + c.e.code : "" + JSON.stringify(c.e);
                        Parse.Analytics.track("Parse FB Utils error", {
                            code: d
                        });
                    } else console.log("Parse facebook utils FB.api !response.e"), a.set("displayName", c.name), 
                    a.set("email", c.email), a.set("profilePicture", c.picture.data.url), a.set("roundsCreated", 0), 
                    a.save(null, {
                        success: function() {
                            console.log("user.save into parse; fb log in success"), b.StartApp.Start.Controller.loadMainAppWithSuccess(), 
                            Parse.Analytics.track("fbLogin");
                        },
                        error: function(a, c) {
                            console.log("e saving user into parse for fb: " + JSON.stringify(c)), console.log(c), 
                            b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Facebook sign up error:", c.message, !0, !0), 
                            a.destroy(), b.StartApp.Start.Controller.logOut();
                        }
                    });
                });
            },
            error: function(a, c) {
                s.uninstallFBApp(), b.StartApp.Start.Controller.logOut(), console.log("Unable to create/log in as Facebook user"), 
                console.log("  ERROR1 = " + JSON.stringify(a)), console.log("  ERROR2 = " + JSON.stringify(c)), 
                b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops. Something happened.", "There was an error logging you in with Facebook. Please try your request again.", !0, !0);
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: d
                });
                var e = "undefined" != typeof c.code ? "" + c.code : "" + JSON.stringify(c);
                Parse.Analytics.track("error", {
                    code: e
                });
            }
        });
    }, this.fbLogIntoParse = function(a) {
        console.log("FacebookAPI: fbLogIntoParse with session: " + JSON.stringify(a)), b.MainApp.Main.Controller.showSpinner("Logging in...");
        var c = new Date();
        c.setMonth(c.getMonth() + 2), c = c.toISOString();
        var d = {
            id: a.authResponse.userID + "",
            access_token: a.authResponse.accessToken,
            expiration_date: c
        }, f = this;
        Parse.FacebookUtils.logIn(d, {
            success: function(a) {
                a.existed() ? (console.log("User logged in through Facebook!"), b.StartApp.Start.Controller.loadMainAppWithSuccess()) : FB.api("/me", {
                    fields: "id, name, picture, email"
                }, function(c) {
                    if (c.e) {
                        console.log("Parse facebook utils FB.api response.e: " + JSON.stringify(c.e)), console.log("Oops something went wrong with facebook."), 
                        b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error", e.message, !0, !0), 
                        a.destroy(), b.StartApp.Start.Controller.logOut();
                        var d = "undefined" != typeof c.e.code ? "" + c.e.code : "" + JSON.stringify(c.e);
                        Parse.Analytics.track("Parse FB Utils error", {
                            code: d
                        });
                    } else console.log("Parse facebook utils FB.api !response.e"), a.set("displayName", c.name), 
                    a.set("email", c.email), a.set("profilePicture", c.picture.data.url), a.set("roundsCreated", 0), 
                    a.save(null, {
                        success: function() {
                            console.log("user.save into parse; fb log in success"), b.StartApp.Start.Controller.loadMainAppWithSuccess(), 
                            Parse.Analytics.track("fbLogin");
                        },
                        error: function(a, c) {
                            console.log("e saving user into parse for fb: " + JSON.stringify(c)), console.log(c), 
                            b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Facebook sign up error:", c.message, !0, !0), 
                            a.destroy(), b.StartApp.Start.Controller.logOut();
                        }
                    });
                });
            },
            error: function(a, c) {
                f.uninstallFBApp(), b.StartApp.Start.Controller.logOut(), console.log("Unable to create/log in as Facebook user"), 
                console.log("  ERROR1 = " + JSON.stringify(a)), console.log("  ERROR2 = " + JSON.stringify(c)), 
                b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops. Something happened.", "There was an error logging you in with Facebook. Please try your request again.", !0, !0);
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: d
                });
                var e = "undefined" != typeof c.code ? "" + c.code : "" + JSON.stringify(c);
                Parse.Analytics.track("error", {
                    code: e
                });
            }
        });
    }, this.uninstallFBApp = function() {
        console.log("FacebookAPI uninstallFBApp:");
        var a = this;
        FB.api("/me/permissions", "DELETE", function() {
            console.log("FB APP Uninstalled"), a.logOut();
        });
    };
}), BGS.module("GoogleAPI", function(a, b, c, d, e, f) {
    this.googleGetUsersAddress = function(c, d, f) {
        a.googleGetLocationReverseGeocode(c).then(function(a) {
            d !== !1 && setTimeout(function() {
                b.MainApp.Main.Controller.showAddressBar("You appear to be near:<br>" + a);
            }, 200), e.isFunction(f) && f("Success getting user address");
        }, function() {
            d !== !1 && setTimeout(function() {
                b.MainApp.Main.Controller.showAddressBar("Could not find your current address.<br>Pull down to refresh and try again.");
            }, 200), e.isFunction(f) && f("Error getting user address");
        });
    }, this.googleGetLocationReverseGeocode = function(a) {
        var b = new e.Deferred(), c = new google.maps.Geocoder(), d = new google.maps.LatLng(a.lat, a.lng);
        return c.geocode({
            latLng: d
        }, function(a, c) {
            c == google.maps.GeocoderStatus.OK ? a[0] ? b.resolve(a[0].formatted_address) : b.reject("Could not retrieve your current address.") : b.reject("Finding your address failed due to: " + c);
        }), b.promise();
    }, this.googleClearTaxiCache = function() {
        b.GoogleAPI.googleGetNearbyResults.taxiCache && (b.GoogleAPI.googleGetNearbyResults.taxiCache = null);
    }, this.googleGetNearbyResults = function(a, c, d, g) {
        var h = new e.Deferred(), i = this;
        return !b.GoogleAPI.googleGetNearbyResults.taxiCache || f.isObject(b.GoogleAPI.googleGetNearbyResults.taxiCache) === !1 && void 0 === b.GoogleAPI.googleGetNearbyResults.taxiCache.length || c === !0 || d === !0 || void 0 === this.userLocation ? (b.GoogleAPI.googleGetNearbyResults.taxiCache = {}, 
        b.Utilities.getCurrentLocation(g).then(function(a) {
            i.userLocation = a, b.GoogleAPI.googleGetUsersAddress(a, !0, function() {
                b.GoogleAPI.makeSearchRequest(a, function(a, c) {
                    if (c == google.maps.places.PlacesServiceStatus.OK) {
                        var d = i.parseReturnedGooglePlaceCollection(a);
                        if (0 === d.length) return h.reject("Your search yielded no results."), void 0;
                        h.resolve(d, isCached = !1, c), b.GoogleAPI.googleGetNearbyResults.taxiCache = d;
                    } else h.reject(c);
                });
            });
        }, function(a) {
            console.log("There was an error getting your location: " + a), h.reject(JSON.stringify(a));
        }), setTimeout(function() {
            "pending" == h.state() && h.reject("Operation timed out. Do you have an internet connection?");
        }, 3e4), h.promise()) : (h.resolve(b.GoogleAPI.googleGetNearbyResults.taxiCache, isCached = !0), 
        b.MainApp.Main.Controller.showAddressBar(), h.promise());
    }, this.googleGetPlaceDetails = function(a, b) {
        var c = new google.maps.places.PlacesService(document.getElementById("map-canvas")), d = {
            reference: a.get("reference")
        };
        c.getDetails(d, function(c, d) {
            d == google.maps.places.PlacesServiceStatus.OK && a.set("phone", c.formatted_phone_number), 
            e.isFunction(b) && b(a, d);
        });
    }, this.makeSearchRequest = function(a, b) {
        var c = new google.maps.LatLng(a.lat, a.lng), d = {
            location: c,
            radius: 5e4,
            query: "taxi"
        }, f = new google.maps.places.PlacesService(document.getElementById("map-canvas"));
        f.textSearch(d, function(a, c) {
            console.log("made actual Google API call"), e.isFunction(b) && b(a, c);
        });
    }, this.parseReturnedGooglePlaceCollection = function(a) {
        var c = new b.Entities.GooglePlaceCollection();
        return f.each(a, function(a) {
            var d = new b.Entities.GooglePlace();
            d.set("properties", {}), d = d.extendModelWithReturnedObject(a), c.add(d);
        }), c;
    };
}), BGS.module("Utilities", function(a, b, c, d, e) {
    this.initialize = function() {
        console.log("utils.js: initialize -- **************** REMEMBER TO USE CORRECT Cordova*.js FILE ********************"), 
        console.log("utils.js - can remove the this.Views object once all moved to marionette apps"), 
        this.Views = {}, this.templateLoader = new this.TemplateLoader(), this.fsqIsInitialized = !1;
        var a = "PG4Fpi5KFo5RBN3RM0vK5bY19hqjXOYgATlwTdYo", b = "oM6sHrsY67LsfQAhXNDTG9SbWz9qKJZeh8LTGFXc";
        Parse.initialize(a, b), this.rootTemplateAddress = "templates/", this.templateCount = 0, 
        this.isUnitTesting = !1, this.svEnabled = !0;
    }, this.TemplateLoader = function() {
        this.templates = {}, this.load = function(a, c) {
            b.Utilities.templateCount = a.length;
            var d = this, f = function(g) {
                var h = a[g];
                e.get(b.Utilities.rootTemplateAddress + h + ".html", function(b) {
                    d.templates[h] = b, g++, g < a.length ? f(g) : c();
                }, "text");
            };
            f(0);
        }, this.get = function(a) {
            return this.templates[a];
        };
    }, this.deleteUserAccountAndDataFromParse = function(a) {
        var c = Parse.User.current() || a, d = this, f = new e.Deferred();
        return c ? (d.isUnitTesting === !1 && b.MainApp.Main.Controller.showSpinner(), "undefined" != typeof FB && b.StartApp.Start.Controller.uninstallFBApp(), 
        Parse.Cloud.run("deleteUserAccountAndData", {
            user: "dummy"
        }, {
            success: function(a) {
                b.StartApp.Start.Controller.logOut(), d.isUnitTesting === !1 && b.MainApp.Main.Controller.showNotificationWithDismissDelay("Account deleted.", "Your account and all associated data have been successfully removed from Parse. We hope you come back!", isError = !1, showAtBottom = !0), 
                f.resolve(a), Parse.Analytics.track("userAccountAndDataDeletion");
            },
            error: function(a) {
                console.log("Utilities.deleteUserAccountAndDataFromParse cloud code called back error " + JSON.stringify(a)), 
                d.isUnitTesting === !1 && b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error", "Delete account failed with error: " + JSON.stringify(a), isError = !0, showAtBottom = !0), 
                b.StartApp.Start.Controller.logOut(), f.reject(a);
            }
        }), f) : (f.reject(), f);
    }, this.retrieveAPIInfoFromParse = function(a, c) {
        var d = this, f = Parse.Object.extend("API"), g = new Parse.Query(f);
        g.equalTo("apiName", a), g.find({
            success: function(a) {
                var b = a[0], d = b.attributes;
                e.isFunction(c) && c(d);
            },
            error: function(c) {
                console.log("failure retrieving " + a + " api info from parse"), console.log(c), 
                d.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Error message: " + c.message, isError = !0, showAtBottom = !0));
            }
        });
    }, this.isPhonegap = function() {
        return "undefined" != typeof Cordova || "undefined" != typeof cordova || "undefined" != typeof Phonegap || "undefined" != typeof PhoneGap || "undefined" != typeof phonegap;
    }, this.isMobileDevice = function() {
        var a = !1;
        return -1 == document.URL.indexOf("http://") && (a = !0), a;
    }, this.getCurrentLocation = function(a) {
        console.log("this.js: getCurrentLocation");
        var c = new e.Deferred(), d = this;
        if (null !== a && void 0 !== a) return c.resolve(a), c.promise();
        if (navigator.geolocation) {
            d.getCurrentLocation.attempts || (d.getCurrentLocation.attempts = 1);
            var f = 3, g = setTimeout(function() {
                console.log("getting user location timed out"), d.getCurrentLocation.attempts < f ? (console.log("try finding user location again after failed attempt"), 
                d.getCurrentLocation.attempts++, d.getCurrentLocation()) : (console.log("we have tried too many times to find location so reject our promise"), 
                d.getCurrentLocation.attempts = null, c.reject("Trying to find your location is taking too long. Do you have an internet connection?"));
            }, 1e4);
            navigator.geolocation.getCurrentPosition(function(a) {
                clearTimeout(g);
                var b = {}, e = a.coords.latitude, f = a.coords.longitude;
                b.lat = e, b.lng = f, d.getCurrentLocation.attempts = null, c.resolve(b);
            }, function(a) {
                console.log("failed returning user location with error: " + JSON.stringify(a)), 
                d.getCurrentLocation.attempts = null, clearTimeout(g), c.reject("Finding your current location failed.  Ensure location services are enabled on your device and try again.");
            }, {
                maximumAge: 6e4,
                timeout: 12e3,
                enableHighAccuracy: !0
            });
        } else console.log("geolocation unavailable and failed"), c.reject("We can't find your location.  Do you have an internet connection and location services enabled?"), 
        b.MainApp.Main.Controller.showNotificationWithDismissDelay("Location Services Required", "Please enable location finding services to access this feature of Bar Golf Stars.", isError = !0, showAtBottom = !0);
        return c.promise();
    }, this.convertMeters = function(a) {
        var b = a, c = .001, d = 621371e-9;
        return {
            to: function(a) {
                function e(a) {
                    return parseFloat(a.toFixed(2));
                }
                return "kilometers" == a ? e(b * c) : e(b * d);
            }
        };
    }, this.initialize();
}), BGS.module("Entities", function(a, b, c, d, e, f) {
    this.FoursquarePlace = c.Model.extend({}), this.FoursquarePlaceCollection = c.Collection.extend({
        model: a.FoursquarePlace,
        initialize: function(a) {
            if (this.uri = "venues/search", a) {
                var c = b.FoursquareAPI.fsqGetDefaultBarOptions(), d = a.options;
                e.extend(!0, c, d), this.endpoint = a.endpoint, this.params = b.FoursquareAPI.fsqBuildParameterList(c), 
                this.authString = a.authString, this.isManualSearch = a.isManualSearch;
            }
        },
        url: function() {
            return this.endpoint + this.uri + this.params + this.authString;
        },
        parse: function(a) {
            var c, d = a.response.venues, e = b.FoursquareAPI.getCategoryIds();
            c = this.isManualSearch === !1 ? f.reject(d, function(a) {
                return f.isEmpty(a.contact.formattedPhone) && f.isEmpty(a.contact.twitter) || f.contains(e, a.categories[0].id) !== !0;
            }) : d;
            var g = f.sortBy(c, function(a) {
                return a.location.distance;
            });
            return g;
        }
    }), this.GooglePlace = c.Model.extend({
        defaults: {
            name: "taxi",
            formatted_address: "",
            googleId: "",
            phone: "",
            rating: "",
            reference: ""
        },
        initialize: function() {
            this.bind("e", function(a, b) {
                console.log(b);
            }), f.bindAll(this, "extendModelWithReturnedObject", "trimAddressString");
        },
        extendModelWithReturnedObject: function(a) {
            return this.set("name", a.name), this.trimAddressString(a.formatted_address), this.set("googleId", a.id), 
            this.set("reference", a.reference), this.set("phone", a.phone), this.set("rating", a.rating), 
            this;
        },
        trimAddressString: function(a) {
            var b = a.substring(a.lastIndexOf(",")), c = a.replace(b, "");
            this.set("formatted_address", c);
        }
    }), this.GooglePlaceCollection = c.Collection.extend({
        model: a.GooglePlace
    });
}), BGS.module("Entities", function(a, b, c, d, e, f) {
    a.Round = Parse.Object.extend({
        className: "Round"
    }), a.Scorecard = Parse.Object.extend({
        className: "Scorecard"
    }), a.Player = Parse.Object.extend({
        className: "Player"
    }), a.PlayerCollection = Parse.Collection.extend({
        model: a.Player,
        comparator: function(a) {
            return a.get("playerNum");
        },
        filterOutDefaultPlayer: function() {
            var a = f.filter(this.models, function(a) {
                return "Touch to Add New Player" != a.get("displayName");
            });
            return this.reset(a), this;
        }
    });
    var g = function() {
        var a = new Parse.Promise(), b = new Parse.Query("Player");
        return b.equalTo("isUserAccount", !0), b.equalTo("user", Parse.User.current()), 
        b.find().then(function(b) {
            a.resolve(b);
        }, function(b) {
            console.log("error getting player: " + JSON.stringify(b)), a.reject(b);
        }), a;
    }, h = function() {
        var c = new Parse.Promise(), d = this, e = new a.Player(), f = Parse.User.current();
        return g().then(function(a) {
            if (a.length > 0) e = a[0]; else {
                e.set("user", f), e.set("displayName", f.get("displayName")), e.set("playerNum", 1), 
                e.set("isUserAccount", !0), e.set("handicap", 0);
                var g = new Parse.ACL(f);
                g.setPublicReadAccess(!0), e.setACL(g);
            }
            e.set("round", b.RSApp.RoundSetup.Controller.round), e.set("scorecard", b.RSApp.RoundSetup.Controller.scorecard), 
            e.set("maxHolePlayed", 0), e.set("totalRoundStrokes", 0), e.set("parsInPlayTotal", 0), 
            e.set("holesPlayed", []), 0 === d.playersCollection.length ? d.playersCollection.add(e) : "", 
            c.resolve();
        }, function(a) {
            return console.log("e: " + JSON.stringify(a)), c.reject(a), a;
        }), c;
    }, i = function() {
        var b = !0, c = new Parse.Promise(), d = this;
        if ("undefined" == typeof d.playersCollection && (d.playersCollection = new a.PlayerCollection()), 
        d.playersCollection.length < 4) {
            if (d.playersCollection.each(function(a) {
                "Touch to Add New Player" === a.get("displayName") && (b = !1);
            }), b === !1) return c.resolve(), void 0;
            var e = new a.Player();
            e.set("playerNum", d.playersCollection.length + 1), e.set("displayName", "Touch to Add New Player"), 
            e.set("handicap", 0), e.set("maxHolePlayed", 0), e.set("isUserAccount", !1), e.set("totalRoundStrokes", 0), 
            e.set("parsInPlayTotal", 0), e.set("holesPlayed", []);
            var f = new Parse.ACL(Parse.User.current());
            f.setPublicReadAccess(!0), e.setACL(f), d.playersCollection.add(e), c.resolve();
        } else c.resolve();
        return c;
    }, j = function() {
        this.playersCollection.each(function(a) {
            var b = this.playersCollection.indexOf(a);
            a.get("playerNum") != b + 1 && (a.set("playerNum", b + 1), "undefined" != typeof a.get("user") && a.save().then(function() {}));
        });
    }, k = function(c) {
        var d = this, e = new Parse.Promise();
        return d.playersCollection = new a.PlayerCollection(), d.playersCollection = c, 
        h().then(function() {
            i();
            var a = [];
            return d.playersCollection.forEach(function(b) {
                b.get("isUserAccount") === !0 && a.push(b.save());
            }), Parse.Promise.when(a);
        }).then(function() {
            e.resolve(d.playersCollection);
        }, function(a) {
            b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Saving Player", "There was an error saving player. Please try your request again. If problem persists, try logging out and back in again.", isError = !0, showAtBottom = !0), 
            console.error("Error saving player: " + JSON.stringify(a)), e.reject(a);
        }), e;
    }, l = {
        getAllLocalPlayerEntities: function() {
            var c = new a.PlayerCollection(), d = new Parse.Query("Player"), f = e.Deferred(), g = f.promise();
            return d.equalTo("scorecard", b.RSApp.RoundSetup.Controller.scorecard), d.equalTo("round", b.RSApp.RoundSetup.Controller.round), 
            c.query = d, c.fetch().then(function(a) {
                return k(a);
            }).then(function(a) {
                b.MainApp.Main.Controller.hideSpinner(), f.resolve(a);
            }, function(a) {
                console.log("e with player fetch: " + JSON.stringify(a)), f.reject(a);
            }), g;
        },
        getScorecardPlayerEntities: function() {
            console.log("getScorecardPlayerEntities"), b.MainApp.Main.Controller.showSpinner("Retrieving players");
            var c = e.Deferred(), d = c.promise();
            return l.getAllLocalPlayerEntities().then(function(b) {
                var d = new a.PlayerCollection();
                return d = b.filterOutDefaultPlayer(), c.resolve(d);
            }, function(a) {
                return c.reject(a);
            }), e.when(d).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), d;
        }
    };
    b.reqres.setHandler("scorecard:player:entities", function() {
        return b.MainApp.Main.Controller.showSpinner(), l.getScorecardPlayerEntities();
    }), b.reqres.setHandler("rs:player:entities", function() {
        return b.MainApp.Main.Controller.showSpinner(), l.getAllLocalPlayerEntities();
    }), b.reqres.setHandler("rs:player:newcurrent", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), h();
    }), b.reqres.setHandler("rs:player:new", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i();
    }), b.reqres.setHandler("rs:player:renumber", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), j();
    });
}), BGS.module("Entities", function(a, b, c, d, e, f) {
    a.Hole = Parse.Object.extend({
        className: "Hole"
    }), a.ScorecardHoleCollection = Parse.Collection.extend({
        model: a.Hole,
        comparator: function(a) {
            return a.get("holeNum");
        },
        getHole: function(b) {
            var c = f.filter(this.models, function(a) {
                return a.get("holeNum") === b;
            }), d = new a.Hole();
            return d = c;
        }
    });
    var g = function(c) {
        var d = new a.ScorecardHoleCollection();
        for (d = c, user = Parse.User.current(), i = d.length + 1; 10 > i; i++) {
            var e = new a.Hole();
            e.set("holeNum", i), e.set("name", "Hole Name Not Added Yet"), e.set("par", 1), 
            e.set("timeAtHole", 18e5), e.set("location", new Parse.GeoPoint()), e.set("round", b.RSApp.RoundSetup.Controller.round), 
            e.set("user", user);
            var f = new Parse.ACL(user);
            f.setPublicReadAccess(!0), e.setACL(f), d.add(e);
        }
        return d.forEach(function(a) {
            a.get("user") === user && a.save().then(function() {}, function(c) {
                console.log("e saving hole: " + JSON.stringify(c)), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Saving Hole", "There was an error setting up hole " + a.get("holeNum") + ". Be sure to select that hole and attempt saving again manually.", isError = !0, showAtBottom = !0);
            });
        }), d.models;
    }, h = function(a) {
        var c = b.RSApp.RoundSetup.Controller.round.id || a;
        console.log("deleteCurrentCourse called for");
        var d = new Parse.Promise();
        return Parse.Cloud.run("deleteAllHolesForRound", {
            round: c
        }, {
            success: function() {
                d.resolve(c);
            },
            error: function(a) {
                d.reject(a);
            }
        }), d;
    }, j = function(c, d) {
        var e = new a.ScorecardHoleCollection(), f = Parse.User.current(), g = b.RSApp.RoundSetup.Controller.round || d;
        return c.forEach(function(b) {
            var d = new a.Hole(), h = new Parse.GeoPoint({
                latitude: b.get("location").lat,
                longitude: b.get("location").lng
            });
            d.set("holeNum", c.indexOf(b) + 1), d.set("name", b.get("name")), d.set("location", h), 
            d.set("par", 1), d.set("timeAtHole", 18e5), d.set("round", g), d.set("user", f);
            var i = new Parse.ACL(Parse.User.current());
            i.setPublicReadAccess(!0), d.setACL(i), e.add(d);
        }), e.reset(e.first(9)), e;
    }, k = function(a) {
        var c = new Parse.Promise(), d = {
            searchType: "bars",
            refresh: !0,
            showAddressBar: !1
        };
        return b.PlacesApp.Places.Controller.queryFoursquarePlaces(d, function(b, d) {
            return "success" === b ? c.resolve(d, a) : c.reject(b);
        }), c;
    }, l = function(a) {
        var b = new Parse.Promise();
        return h(a).then(function(a) {
            return k(a);
        }).then(function(a, b) {
            return j(a, b);
        }).then(function(a) {
            b.resolve(a);
        }, function(a) {
            b.reject(a);
        }), b;
    }, m = function() {
        var c = new Parse.Promise();
        return holes = new a.ScorecardHoleCollection(), query = new Parse.Query("Hole"), 
        query.equalTo("user", Parse.User.current()), query.equalTo("round", b.RSApp.RoundSetup.Controller.round), 
        holes.query = query, holes.fetch().then(function(a) {
            return c.resolve(a);
        }, function(a) {
            return console.log("e with holes fetch: " + JSON.stringify(data)), c.reject(a);
        }), c;
    }, n = {
        getScorecardHoleEntities: function(a, c) {
            var d = e.Deferred(), f = d.promise(), h = a === !1 ? m : l;
            return h(c).then(function(a) {
                d.resolve(a);
            }, function(a) {
                console.log("e with holes fetch: " + JSON.stringify(data)), d.reject(a);
            }), e.when(f).done(function(a) {
                var c = g(a);
                a.reset(c), b.MainApp.Main.Controller.hideSpinner();
            }), f;
        }
    };
    b.reqres.setHandler("scorecard:hole:entities", function() {
        return b.MainApp.Main.Controller.showSpinner(), n.getScorecardHoleEntities(withAutomaticHoleSetup = !1);
    }), b.reqres.setHandler("scorecard:hole:entities:automatic-setup", function(a) {
        return b.MainApp.Main.Controller.showSpinner("Setting up..."), n.getScorecardHoleEntities(withAutomaticHoleSetup = !0, a);
    });
}), BGS.module("Entities", function(a, b, c, d, e, f) {
    a.Rule = Parse.Object.extend({
        className: "Rule"
    }), a.RoundRuleCollection = Parse.Collection.extend({
        model: a.Rule,
        comparator: function(a) {
            return a.get("value");
        },
        filterDefaultRules: function(a) {
            var c = [];
            f.each(a, function(a) {
                if ("undefined" != typeof a.get("modifiedDefault")) {
                    var b = Parse.Object.extend("Rule");
                    b = a.get("modifiedDefault"), c.push(b.id);
                }
            });
            var d = f.reject(a, function(a) {
                var b = Parse.Object.extend("Rule");
                return b = a, f.contains(c, b.id);
            });
            if ("undefined" != typeof b.RSApp.RoundSetup.Controller.round.get("rules")) {
                var e = f.filter(d, function(a) {
                    var c = Parse.Object.extend("Rule");
                    return c = a, f.contains(b.RSApp.RoundSetup.Controller.round.get("rules"), c.id);
                });
                return e;
            }
            return d;
        },
        filterDrinks: function() {
            var a = f.filter(this.models, function(a) {
                return "dummy" === a.get("type") && a.set("type", "drink"), "Touch to Add New Rule" === a.get("name") && a.set("name", "Touch to Add New Drink"), 
                "drink" === a.get("type");
            });
            return this.reset(a), this;
        },
        filterBonuses: function() {
            var a = f.filter(this.models, function(a) {
                return "dummy" === a.get("type") && a.set("type", "bonus"), "Touch to Add New Rule" === a.get("name") && a.set("name", "Touch to Add New Bonus"), 
                "bonus" === a.get("type");
            });
            return this.reset(a), this;
        },
        filterPenalties: function() {
            var a = f.filter(this.models, function(a) {
                return "dummy" === a.get("type") && a.set("type", "penalty"), "Touch to Add New Rule" === a.get("name") && a.set("name", "Touch to Add New Penalty"), 
                "penalty" === a.get("type");
            });
            return this.reset(a), this;
        },
        filterOutDefaultRule: function() {
            var a = f.filter(this.models, function(a) {
                return "Touch to Add New Drink" != a.get("name") && "Touch to Add New Bonus" != a.get("name") && "Touch to Add New Penalty" != a.get("name");
            });
            return this.reset(a), this;
        }
    });
    var g = function() {
        var b = !0;
        if (this.rulesCollection.each(function(a) {
            "Touch to Add New Rule" === a.get("name") && (b = !1);
        }), b !== !1) {
            var c = new a.Rule();
            c.set("name", "Touch to Add New Rule"), c.set("type", "dummy"), c.set("value", 99999999999999);
            var d = new Parse.ACL(Parse.User.current());
            d.setPublicReadAccess(!0), c.setACL(d), this.rulesCollection.add(c);
        }
    }, h = function(b, c) {
        var d = this;
        if (d.rulesCollection = new a.RoundRuleCollection(), d.rulesCollection = b, c !== !0) {
            var e = d.rulesCollection.filterDefaultRules(d.rulesCollection.models);
            d.rulesCollection.reset(e), g();
        }
        return d.rulesCollection.models;
    }, i = {
        getAllRoundRuleEntities: function() {
            var c = new a.RoundRuleCollection(), d = e.Deferred(), f = d.promise(), g = new Parse.Query("Rule");
            g.equalTo("round", b.RSApp.RoundSetup.Controller.round);
            var i = new Parse.Query("Rule");
            i.equalTo("isDefault", !0), i.doesNotMatchQuery("modifiedDefault", g);
            var j = Parse.Query.or(i, g);
            return c.query = j, c.fetch().then(function(a) {
                d.resolve(a);
            }, function(a) {
                console.log("e with rule fetch: " + JSON.stringify(a)), d.reject(a);
            }), e.when(f).done(function(a) {
                var b = h(a);
                a.reset(b);
            }), f;
        },
        getDefaultRuleEntities: function(b) {
            var c = new a.RoundRuleCollection(), d = e.Deferred(), f = d.promise(), g = new Parse.Query("Rule");
            return g.equalTo("isDefault", !0), c.query = g, c.fetch().then(function(a) {
                var e = h(a, b);
                c.reset(e), d.resolve(c);
            }, function(a) {
                console.log("e with rule fetch: " + JSON.stringify(a)), d.reject(a);
            }), f;
        },
        getDefaultDrinkRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving drinks");
            var a = e.Deferred(), c = a.promise();
            return i.getDefaultRuleEntities().then(function(b) {
                var c = b.filterDrinks();
                a.resolve(c);
            }, function(b) {
                a.reject(b);
            }), e.when(c).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), c;
        },
        getDefaultBonusRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving bonuses");
            var a = e.Deferred(), c = a.promise();
            return i.getDefaultRuleEntities().then(function(b) {
                var c = b.filterBonuses();
                a.resolve(c);
            }, function(b) {
                a.reject(b);
            }), e.when(c).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), c;
        },
        getDefaultPenaltyRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving penalties");
            var a = e.Deferred(), c = a.promise();
            return i.getDefaultRuleEntities().then(function(b) {
                var c = b.filterPenalties();
                a.resolve(c);
            }, function(b) {
                a.reject(b);
            }), e.when(c).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), c;
        },
        getDrinkRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving drinks");
            var c = e.Deferred(), d = c.promise();
            return i.getAllRoundRuleEntities().then(function(b) {
                var d = new a.RoundRuleCollection();
                return d = b.filterDrinks(), c.resolve(d);
            }, function(a) {
                return c.reject(a);
            }), e.when(d).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), d;
        },
        getBonusRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving bonuses");
            var a = e.Deferred(), c = a.promise();
            return i.getAllRoundRuleEntities().then(function(b) {
                var c = b.filterBonuses();
                a.resolve(c);
            }, function(b) {
                a.reject(b);
            }), e.when(c).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), c;
        },
        getPenaltyRuleEntities: function() {
            b.MainApp.Main.Controller.showSpinner("Retrieving penalties");
            var a = e.Deferred(), c = a.promise();
            return i.getAllRoundRuleEntities().then(function(b) {
                var c = b.filterPenalties();
                a.resolve(c);
            }, function(b) {
                a.reject(b);
            }), e.when(c).done(function() {
                b.MainApp.Main.Controller.hideSpinner();
            }), c;
        },
        getRuleEntity: function(b) {
            var c = new a.Rule({
                id: b
            }), d = e.Deferred(), f = d.promise();
            return c.fetch().then(function(a) {
                d.resolve(a);
            }, function(a) {
                console.log("e: " + JSON.stringify(a)), d.reject(a);
            }), f;
        }
    };
    b.reqres.setHandler("rule:id", function(a) {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i.getRuleEntity(a);
    }), b.reqres.setHandler("rule:default:entities", function(a) {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i.getDefaultRuleEntities(a);
    }), b.reqres.setHandler("rule:default:drink:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Pouring drinks..."), i.getDefaultDrinkRuleEntities();
    }), b.reqres.setHandler("rule:default:bonus:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Fetching bonuses..."), i.getDefaultBonusRuleEntities();
    }), b.reqres.setHandler("rule:default:penalty:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i.getDefaultPenaltyRuleEntities();
    }), b.reqres.setHandler("round:rule:all:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Checking IDs..."), i.getAllRoundRuleEntities();
    }), b.reqres.setHandler("round:rule:drink:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Ordering drinks..."), i.getDrinkRuleEntities();
    }), b.reqres.setHandler("round:rule:bonus:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i.getBonusRuleEntities();
    }), b.reqres.setHandler("round:rule:penalty:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Loading..."), i.getPenaltyRuleEntities();
    }), b.reqres.setHandler("scorecard:rule:drink:entities", function() {
        b.MainApp.Main.Controller.showSpinner("Ordering drinks...");
        var c = new Parse.Promise();
        return i.getDrinkRuleEntities().then(function(b) {
            var d = new a.RoundRuleCollection();
            d = b.filterOutDefaultRule(), c.resolve(d);
        }), c;
    }), b.reqres.setHandler("scorecard:rule:bonus:entities", function() {
        b.MainApp.Main.Controller.showSpinner("Loading...");
        var c = new Parse.Promise();
        return i.getBonusRuleEntities().then(function(b) {
            var d = new a.RoundRuleCollection();
            d = b.filterOutDefaultRule(), c.resolve(d);
        }), c;
    }), b.reqres.setHandler("scorecard:rule:penalty:entities", function() {
        b.MainApp.Main.Controller.showSpinner("Loading...");
        var c = new Parse.Promise();
        return i.getPenaltyRuleEntities().then(function(b) {
            var d = new a.RoundRuleCollection();
            d = b.filterOutDefaultRule(), c.resolve(d);
        }), c;
    });
}), BGS.module("Entities", function(a, b, c, d, e, f) {
    a.Score = Parse.Object.extend({
        className: "Score"
    }), a.ScorecardScoreCollection = Parse.Collection.extend({
        model: a.Score,
        comparator: function(a) {
            return a.get("scoreNum");
        },
        getScoresForPlayer: function(a) {
            var b = f.filter(this.models, function(b) {
                return b.get("player").id === a;
            });
            return b;
        },
        getScoresForHole: function(a, b) {
            var c = f.filter(b, function(b) {
                return b.get("hole").id === a;
            });
            return c;
        }
    });
    var g = {
        getScorecardScoreEntities: function() {
            var c = e.Deferred(), d = c.promise(), f = new a.ScorecardScoreCollection(), g = new Parse.Query("Score");
            return g.equalTo("scorecard", b.RSApp.RoundSetup.Controller.scorecard), f.query = g, 
            f.fetch().then(function(a) {
                c.resolve(a);
            }, function(a) {
                console.log("e with scores fetch: " + JSON.stringify(data)), c.reject(a);
            }), d;
        },
        getScoreEntitiesForPlayerForHole: function(c, d) {
            var f = e.Deferred(), g = f.promise(), h = (new a.ScorecardScoreCollection(), new Parse.Query("Score")), i = Parse.Object.extend("Player"), j = new i(), k = Parse.Object.extend("Hole"), l = new k();
            return j.set("objectId", c), l.set("objectId", d), h.equalTo("scorecard", b.RSApp.RoundSetup.Controller.scorecard), 
            h.equalTo("player", j), h.equalTo("hole", l), h.find().then(function(a) {
                f.resolve(a);
            }, function(a) {
                console.log("e with scores fetch: " + JSON.stringify(a)), f.reject(a);
            }), g;
        }
    };
    b.reqres.setHandler("scorecard:score:entities", function() {
        return b.MainApp.Main.Controller.showSpinner("Fetching scores..."), g.getScorecardScoreEntities();
    }), b.reqres.setHandler("scorecard:player:scores", function(a) {
        var c = a.playerId, d = a.holeId;
        return b.MainApp.Main.Controller.showSpinner("Fetching hole scores..."), g.getScoreEntitiesForPlayerForHole(c, d);
    });
}), BGS.module("StartApp.Start", function(a, b, c, d, e) {
    a.Controller = {
        initialize: function() {
            console.log("start controller init");
            var a = this;
            e("#container").show(), Parse.User.current() ? a.loadMainApp() : a.showStartView();
        },
        mobileInits: function() {
            console.log("mobileInits called from StartController, meaning deviceready called again"), 
            e("#spinner").hide(), b.FacebookAPI.initializeParseFBUtils(), "undefined" != typeof Crittercism && (console.log("crittercism loaded"), 
            Crittercism.init({
                appId: "51effed197c8f23f08000003",
                appVersion: "2.0"
            }));
            var a = window.plugins.revMob;
            a.initWithAppId("5063a942d1a7040c00000027");
        },
        offsetStatusBar: function() {
            function a() {
                return navigator.userAgent.match(/(iPad|iPhone|iPod)/g);
            }
            console.log("offsetStatusBar called"), b.Utilities.isPhonegap() && a() && window.device && parseFloat(window.device.version) >= 7 && (console.log("add the ios 7 20px to top"), 
            e("body").addClass("phonegap-ios-7"));
        },
        resetStatusBar: function() {
            e("body").removeClass("phonegap-ios-7");
        },
        setNavController: function() {
            this.navController = new BackStack.StackNavigator({
                el: "#nav-container"
            });
        },
        showView: function(a, b, c) {
            var d = this;
            setTimeout(function() {
                d.navController.pushView(a, {}, b);
            }, 0), e.isFunction(c) && c();
        },
        showStartView: function() {
            this.startView().render(), this.resetStatusBar();
        },
        showWelcomeView: function() {
            this.setNavController(), this.showView(this.welcomeView(), this.noEffect());
        },
        showForgotPasswordView: function() {
            this.showView(this.forgotPasswordView());
        },
        showLoginView: function() {
            this.showView(this.loginView());
        },
        showSignupView: function() {
            this.showView(this.signupView());
        },
        loadMainAppWithSuccess: function() {
            b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showMainView(cb = function() {
                return setTimeout(function() {
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "Successfully logged in.", !1, !0);
                }, 500), !0;
            });
        },
        loadMainApp: function(a) {
            console.log("load main app called"), b.MainApp.Main.Controller.showMainView(), e.isFunction(a) && a();
        },
        popView: function(a) {
            this.navController.popView(a), b.MainApp.Main.Controller.hideSpinner();
        },
        startView: function() {
            return new b.StartApp.Start.StartView({
                el: "#container"
            });
        },
        welcomeView: function() {
            return new b.StartApp.Start.WelcomeView();
        },
        loginView: function() {
            return new b.StartApp.Start.LoginView();
        },
        signupView: function() {
            return new b.StartApp.Start.SignupView();
        },
        forgotPasswordView: function() {
            return new b.StartApp.Start.ForgotPasswordView();
        },
        noEffect: function() {
            return new BackStack.NoEffect();
        },
        fadeEffect: function() {
            return new BackStack.FadeEffect();
        },
        regularLogin: function(a) {
            b.MainApp.Main.Controller.showSpinner();
            var c = a.username, d = a.password;
            this.logIn(c, d);
        },
        skipLogin: function() {
            this.loadMainApp(cb = function() {
                setTimeout(function() {
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("You're in!", "Just remember, some app features like the networked leaderboard and player statistics will be unavailable without logging in.", !1, !0);
                }, 500);
            });
        },
        logIn: function(a, c) {
            var d = this;
            return Parse.Analytics.track("parseLogin"), Parse.User.logIn(a, c).then(function() {
                return b.Utilities.isUnitTesting === !1 ? d.loadMainAppWithSuccess() : void 0;
            }, function(a) {
                console.log("e at logIn = " + JSON.stringify(a)), Parse.User.logOut(), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error", a.message, !0, !0));
                var c = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: c
                });
            });
        },
        logOut: function() {
            Parse.User.logOut();
            var a, c = new e.Deferred();
            return b.Utilities.isMobileDevice() && "undefined" != typeof FB ? (a = !0, FB.logout(function() {
                a = !1, c.resolve(a);
            })) : c.resolve(a = null), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
            e("#container").empty(), this.showStartView(), b.containerRegion.reset()), b.FoursquareAPI.fsqGetNearbyResults.barCache = null, 
            c.promise();
        },
        signUp: function(a) {
            var c = this;
            return a.set("roundsCreated", 0), a.signUp().then(function(a) {
                return b.Utilities.isUnitTesting === !1 && (c.loadMainApp(), b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "Successfully signed up and logged in.", !1, !0)), 
                a;
            }, function(a) {
                console.log("e = " + a.message), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Error message: " + a.message, isError = !0, showAtBottom = !0));
                var c = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: c
                }), a;
            });
        },
        sendPasswordResetLink: function(a) {
            b.MainApp.Main.Controller.showSpinner("Sending reset link..."), this.resetPasswordForEmail(a);
        },
        resetPasswordForEmail: function(a, c) {
            var d = this, f = a;
            console.log("email to send to = " + f), Parse.User.requestPasswordReset(f, {
                success: function() {
                    e.isFunction(c) && c("success"), console.log("password reset sent successfully"), 
                    b.Utilities.isUnitTesting === !1 && (d.popView(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Email sent!", "A password reset link as been sent to " + f + ".", isError = !1, showAtBottom = !0));
                },
                error: function(a) {
                    e.isFunction(c) && c("e"), console.log(a), console.log("password reset failed with error: " + a.message), 
                    console.log(a.message), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Error message: " + a.message, isError = !0, showAtBottom = !0));
                    var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                    Parse.Analytics.track("error", {
                        code: d
                    });
                }
            });
        }
    };
}), $(document).on("permissions_revoked", function() {
    return console.log("fb permissions revoked"), !1;
}), BGS.module("StartApp.Start", function(a, b, c, d, e, f) {
    a.StartView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("start"));
        },
        onRender: function() {
            var b = e("#container");
            b.css({
                visibility: "hidden"
            }), b.addClass("bg-light"), e("#nav-container").css({
                top: "50%",
                position: "absolute",
                width: "100%"
            }), b = null, a.Controller.showWelcomeView();
        }
    });
}), BGS.module("StartApp.Start", function(a, b, c, d, e, f) {
    a.WelcomeView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("welcome"));
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .facebook-button-bg": "facebookLoginClicked",
                "touchend .goto-login-button": "showLoginClicked",
                "touchend .goto-signup-button": "showSignupClicked",
                "touchend .skip-login-button-bg": "skipLoginClicked"
            }) : f.extend(a, {
                "click .facebook-button-bg": "facebookLoginClicked",
                "click .goto-login-button": "showLoginClicked",
                "click .goto-signup-button": "showSignupClicked",
                "click .skip-login-button-bg": "skipLoginClicked"
            }), a;
        },
        facebookLoginClicked: function() {
            var a = this;
            a.buttonClicked || b.FacebookAPI.facebookLogin(), a.buttonClicked = !0, setTimeout(function() {
                a.buttonClicked = !1;
            }, 1e3);
        },
        showLoginClicked: function() {
            this.buttonClicked || a.Controller.showLoginView(), this.buttonClicked = !0;
        },
        showSignupClicked: function() {
            this.buttonClicked || a.Controller.showSignupView(), this.buttonClicked = !0;
        },
        skipLoginClicked: function() {
            this.buttonClicked || a.Controller.skipLogin(), this.buttonClicked = !0;
        },
        onRender: function() {
            var a = this;
            a.on("viewActivate", a.viewDidActivate, a), a.on("viewDeactivate", a.viewDidDeactivate, a), 
            e("#container").css({
                visibility: "visible"
            });
        },
        viewDidActivate: function() {},
        viewDidDeactivate: function() {}
    });
}), BGS.module("StartApp.Start", function(a, b, c, d, e, f) {
    a.LoginView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("login"));
        },
        onRender: function() {
            var a = this;
            a.on("viewActivate", a.viewDidActivate, a), a.on("viewDeactivate", a.viewDidDeactivate, a), 
            console.log("******************* REMOVE AUTOSETTING LOGIN INFO ***********************"), 
            a.$("#login-username").val("kerry.a.knight@gmail.com"), a.$("#login-password").val("jeeps1");
        },
        viewDidActivate: function() {},
        viewDidDeactivate: function() {},
        events: function() {
            var a = {
                "keypress input[type=text]": "loginOnEnter",
                "keypress input[type=password]": "loginOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .login-button": "loginClicked",
                "touchend .forgot-password-link": "showForgotPasswordClicked",
                "touchend .back-button": "cancelClicked"
            }) : f.extend(a, {
                "click .login-button": "loginClicked",
                "click .forgot-password-link": "showForgotPasswordClicked",
                "click .back-button": "cancelClicked"
            }), a;
        },
        showForgotPasswordClicked: function() {
            this.buttonClicked || a.Controller.showForgotPasswordView(), this.buttonClicked = !0;
        },
        cancelClicked: function() {
            this.buttonClicked || a.Controller.popView(), this.buttonClicked = !0;
        },
        loginOnEnter: function(a) {
            13 == a.keyCode && this.loginClicked(a);
        },
        loginClicked: function() {
            e("input:focus").blur();
            var b = {
                username: this.$("#login-username").val(),
                password: this.$("#login-password").val()
            };
            this.buttonClicked || a.Controller.regularLogin(b), this.buttonClicked = !0;
            var c = this;
            return setTimeout(function() {
                c.buttonClicked = !1;
            }, 1e3), !1;
        }
    });
}), BGS.module("StartApp.Start", function(a, b, c, d, e, f) {
    a.SignupView = c.Marionette.ItemView.extend({
        events: function() {
            var a = {
                "keypress input[type=text]": "signUpOnEnter",
                "keypress input[type=email]": "signUpOnEnter",
                "keypress input[type=password]": "signUpOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .signup-button": "signUpClicked",
                "touchend .back-button": "cancelClicked"
            }) : f.extend(a, {
                "click .signup-button": "signUpClicked",
                "click .back-button": "cancelClicked"
            }), a;
        },
        template: function() {
            return f.template(b.Utilities.templateLoader.get("signup"));
        },
        cancelClicked: function() {
            this.buttonClicked || a.Controller.popView(), this.buttonClicked = !0;
        },
        validateForm: function() {
            var a = !0;
            return !e("#signup-username").val() || e("#signup-username").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a valid email address", isError = !0, showAtBottom = !0), 
            a = !1) : !e("#signup-password").val() || e("#signup-password").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "You must create a password at least 5 characters long with at least 1 number.", isError = !0, showAtBottom = !0), 
            a = !1) : e("#signup-password").val() != e("#signup-password-confirm").val() ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please re-enter your password to confirm it.", isError = !0, showAtBottom = !0), 
            a = !1) : !e("#signup-displayname").val() || e("#signup-displayname").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a display name that will be used as your username on leaderboards and scorecards.", isError = !0, showAtBottom = !0), 
            a = !1) : a;
        },
        signUpOnEnter: function(a) {
            13 == a.keyCode && this.signUpClicked(a);
        },
        signUpClicked: function() {
            if (e("input:focus").blur(), this.validateForm()) {
                b.MainApp.Main.Controller.showSpinner("Signing up...");
                var c = new Parse.User();
                c.set("username", this.$("#signup-username").val()), c.set("password", this.$("#signup-password").val()), 
                c.set("email", this.$("#signup-username").val()), c.set("displayName", this.$("#signup-displayname").val()), 
                c.set("ACL", new Parse.ACL()), this.buttonClicked || a.Controller.signUp(c), this.buttonClicked = !0;
                var d = this;
                return setTimeout(function() {
                    d.buttonClicked = !1;
                }, 1e3), !1;
            }
        }
    });
}), BGS.module("StartApp.Start", function(a, b, c, d, e, f) {
    a.ForgotPasswordView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("forgot-password"));
        },
        onRender: function() {
            this.on("viewActivate", this.viewDidActivate, this), this.on("viewDeactivate", this.viewDidDeactivate, this);
        },
        events: function() {
            var a = {
                "keypress input[type=text]": "sendPasswordResetLinkOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .send-password-button": "sendPasswordResetLinkClicked",
                "touchend .back-button": "cancelClicked"
            }) : f.extend(a, {
                "click .send-password-button": "sendPasswordResetLinkClicked",
                "click .back-button": "cancelClicked"
            }), a;
        },
        viewDidActivate: function() {},
        viewDidDeactivate: function() {},
        cancelClicked: function() {
            this.buttonClicked || a.Controller.popView(), this.buttonClicked = !0;
        },
        sendPasswordResetLinkOnEnter: function(a) {
            13 == a.keyCode && (a.preventDefault(), this.sendPasswordResetLinkClicked());
        },
        sendPasswordResetLinkClicked: function() {
            if (e("input:focus").blur(), !e("#forgot-password-email").val() || e("#forgot-password-email").closest("input").hasClass("e")) return b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a valid email address", isError = !0, showAtBottom = !0), 
            void 0;
            var c = this.$("#forgot-password-email").val();
            this.buttonClicked || a.Controller.sendPasswordResetLink(c), this.buttonClicked = !0;
            var d = this;
            return setTimeout(function() {
                d.buttonClicked = !1;
            }, 1e3), !1;
        }
    });
}), BGS.module("MainApp.Main", function(a, b, c, d, e) {
    b.addRegions({
        containerRegion: "#nav-container"
    }), a.Controller = {
        initialize: function() {
            this.spinner = e("#spinner"), this.spinner.hide(), this.navController = null;
        },
        setNavController: function() {
            e("#nav-container").html(""), this.navController = new BackStack.StackNavigator({
                el: "#nav-container"
            });
        },
        clearNavController: function() {
            var a = this;
            null !== a.navController && "undefined" != typeof a.navController && a.navController.viewsStack.length > 0 && a.popView(a.noEffect());
        },
        showView: function(a, b, c) {
            var d = this;
            setTimeout(function() {
                d.navController.pushView(a, {}, b);
            }, 0), e.isFunction(c) && c();
        },
        loadChildViews: function() {
            var a = this;
            a.headerView = new b.MainApp.Main.HeaderView(), a.placesBarView = new b.MainApp.Main.PlacesBarView(), 
            a.addressBarView = new b.MainApp.Main.AddressBarView(), a.addressBarView.render(), 
            a.leftPanelView = new b.MainApp.Main.LeftPanelView(), a.leftPanelView.render();
        },
        loadUsername: function() {
            this.usernameView = new b.MainApp.Main.UsernameView(), this.usernameView.render();
        },
        showMainView: function() {
            var a = this;
            a.mainView().render(), a.loadScorecardApp(function(a) {
                e.isFunction(a) && a();
            });
        },
        popView: function(a, c) {
            this.navController.popView(a), c && b.MainApp.Main.Controller.hideSpinner();
        },
        mainView: function() {
            return new b.MainApp.Main.MainView({
                el: "#container"
            });
        },
        helpView: function() {
            return new b.MainApp.Main.HelpView();
        },
        showHelpView: function(a) {
            e.modal("", {
                appendTo: "#help-view",
                closeClass: "modalClose",
                closeHTML: '<a class="topcoat-button simplemodal-dismiss-button rs-button anton-font drk-purple white-font">Done</a>',
                containerCss: {
                    opacity: 80,
                    backgroundColor: "rgba(0, 0, 0, 0.75)",
                    borderColor: "#fff",
                    height: "90%",
                    padding: "0px",
                    width: "90%",
                    webkitBoxShadow: "0px 0px 12px rgba(50, 50, 50, 1)",
                    mozBoxShadow: "0px 0px 12px rgba(50, 50, 50, 1)",
                    boxShadow: "0px 0px 12px rgba(50, 50, 50, 1)"
                },
                overlayClose: !0,
                onOpen: function(c) {
                    c.overlay.fadeIn("fast", function() {
                        setTimeout(function() {
                            b.MainApp.Main.Controller.showSpinner();
                        }, 0), c.data.hide(), c.container.fadeIn("fast", function() {
                            parseInt(e(".simplemodal-container").css("height"), 10), parseInt(e(".simplemodal-dismiss-button").css("height"), 10), 
                            new b.MainApp.Main.HelpView({
                                templateView: a
                            }).render(), c.data.fadeIn("fast", function() {
                                b.MainApp.Main.Controller.hideSpinner();
                            });
                        });
                    });
                },
                onClose: function(a) {
                    a.data.fadeOut("fast", function() {
                        a.container.fadeOut("fast", function() {
                            a.overlay.fadeOut("fast", function() {
                                e.modal.close();
                            });
                        });
                    });
                }
            });
        },
        activityView: function(a) {
            return new b.Utilities.Views.ActivityView(a);
        },
        leaderboardView: function(a) {
            return new b.Utilities.Views.LeaderboardView(a);
        },
        playerView: function() {
            return new b.Utilities.Views.PlayerView();
        },
        noEffect: function() {
            return new BackStack.NoEffect();
        },
        fadeEffect: function() {
            return new BackStack.FadeEffect();
        },
        checkForActiveScorecardAndActiveRound: function() {
            var a = e.Deferred(), c = a.promise();
            return s = this, o = {}, s.leftPanelView.hideCurrentRoundOptions(), this.queryForActiveScorecard().then(function(c) {
                return c.length > 0 ? (b.RSApp.RoundSetup.Controller.scorecard = c[0], o.scorecardIsActive = !0, 
                s.queryForParentRoundOfActiveScorecard(b.RSApp.RoundSetup.Controller.scorecard)) : (o.scorecardIsActive = !1, 
                a.reject(o));
            }).then(function(c) {
                if (o.userCreatedRound = !1, !("undefined" != typeof c && c.length > 0)) return a.reject(o);
                var d = b.RSApp.RoundSetup.Controller.round = c[0];
                d.get("user").id == Parse.User.current().id ? (o.userCreatedRound = !0, s.leftPanelView.showCurrentRoundOptions(), 
                a.resolve(o)) : a.reject(o);
            }), c;
        },
        queryForActiveScorecard: function() {
            var a = new Parse.Promise(), b = new Parse.Query("Scorecard"), c = Parse.User.current();
            return b.equalTo("user", c), b.equalTo("isActive", !0), b.find().then(function(b) {
                a.resolve(b);
            }, function(b) {
                a.reject(b);
            }), a;
        },
        queryForParentRoundOfActiveScorecard: function(a) {
            var b = new Parse.Promise(), c = new Parse.Query("Round");
            return c.equalTo("objectId", a.get("round").id), c.equalTo("isActive", !0), c.find().then(function(a) {
                b.resolve(a);
            }, function(a) {
                b.reject(a);
            }), b;
        },
        loadPlacesApp: function(a) {
            this.clearNavController();
            var c = {
                type: a,
                shouldModifySingleHole: !1
            };
            b.PlacesApp.Places.Controller.initialize(c);
        },
        loadScorecardApp: function(a) {
            var c = this;
            this.clearNavController();
            var d = c.checkForActiveScorecardAndActiveRound();
            e.when(d).done(function(d) {
                e.isFunction(a) && a(), c.activeRoundOpts = d, b.ScorecardApp.Scorecard.Controller.initialize(c.activeRoundOpts);
            }), e.when(d).fail(function(d) {
                console.log("getScorecard fail: " + JSON.stringify(d)), e.isFunction(a) && a(), 
                c.activeRoundOpts = d, b.ScorecardApp.Scorecard.Controller.initialize(c.activeRoundOpts);
            }), Parse.Analytics.track("loadScorecardApp");
        },
        loadRSApp: function(a) {
            this.clearNavController(), b.RSApp.RoundSetup.Controller.initialize(a), Parse.Analytics.track("loadRSApp");
        },
        makeRequest: function(a, c) {
            var d = new Parse.Promise();
            return b.request(a, c).then(function(a) {
                d.resolve(a);
            }, function() {
                d.reject("No results available for request: " + a);
            }), d;
        },
        createSlidingView: function() {
            if (b.Utilities.isUnitTesting === !1) {
                var a = this;
                this.slidingPanel = new SlidingView("sliding-sidebar", "sliding-body"), e(".show-sidebar").on("click", function() {
                    a.dismissAnyNotification(), a.slidingPanel.bodyOffset == a.slidingPanel.sidebarWidth ? a.slidingPanel.close() : a.slidingPanel.open();
                }), this.slidingPanel.sidebar.on("panelOpen", function() {
                    a.disableTouchInteraction();
                }), this.slidingPanel.sidebar.on("panelClose", function() {
                    a.enableTouchInteraction();
                });
            }
        },
        closeSlidingView: function(a) {
            b.Utilities.isUnitTesting === !1 && this.slidingPanel.close(function() {
                e.isFunction(a) && a();
            });
        },
        disableTouchInteraction: function() {
            IScroll.prototype.disable(), this.placesBarView.undelegateEvents(), b.PlacesApp.Places.Controller.disableEvents(), 
            b.RSApp.RoundSetup.Controller.disableEvents();
        },
        enableTouchInteraction: function() {
            IScroll.prototype.enable(), this.placesBarView.delegateEvents(), b.PlacesApp.Places.Controller.enableEvents(), 
            b.RSApp.RoundSetup.Controller.enableEvents();
        },
        calculateNavControllerHeight: function(a) {
            if (b.Utilities.isUnitTesting === !1) {
                var c = parseInt(e("body").css("height"), 10), d = parseInt(e(".header").css("height"), 10), f = parseInt(e(".places-bar").css("height"), 10), g = c - (d + f);
                e("#nav-container").css({
                    height: g,
                    "margin-top": f,
                    "padding-top": 1
                }), e.isFunction(a) && a(g), g = null;
            }
        },
        dismissAnyNotification: function() {
            b.Utilities.isUnitTesting === !1 && e("#freeow").empty();
        },
        showNotificationWithDismissDelay: function(a, c, d, f) {
            if (b.Utilities.isUnitTesting === !1) {
                var g = {};
                g.classes = [ e("#freeow-style").val() ], d ? g.classes.push("freeow-error") : g.classes.push("freeow-success"), 
                f ? e("#freeow").addClass("freeow-bottom-center") : e("#freeow").addClass("freeow-navbar-center"), 
                e("#freeow").freeow(a, c, g);
            }
        },
        showSpinner: function(a) {
            if (b.Utilities.isUnitTesting === !1) {
                e(".spinnerMask").css({
                    visibility: "visible"
                }).fadeTo(100, .45);
                var c = e(".spinner-text span");
                a && "" !== a ? c.html(a) : c.html(this.randomLoadingMessage()), this.spinner.show();
            }
        },
        hideSpinner: function() {
            b.Utilities.isUnitTesting === !1 && (e(".spinnerMask").css({
                visibility: "hidden"
            }).fadeTo(100, 0), e(".spinner-text span").html(""), this.spinner.hide(), e(".spinnerMask").removeAttr("style"));
        },
        randomLoadingMessage: function() {
            var a = [ "Loading...", "Baking cookies...", "Twiddling thumbs...", "Pouring pints...", "Loosening up...", "Waking hamsters...", "Googling it...", "Thinking about cheese...", "Changing station...", "Clipping toenails...", "Ordering takeout...", "Duct taping...", "Making spaghetti...", "Thinking about pizza...", "Brushing teeth...", "Phoning home...", "Greasing axles...", "Checking tire pressure...", "Updating...", "Making mixtape...", "Rotary girdering...", "Flipping burgers...", "Frying twinkies...", "YOLO-ing...", "Making fart noises...", "Cooking ramen noodles...", "Harnessing chi...", "Using the Force...", "Picking nose...", "Recharging karma...", "Pushing the red button...", "Crunching numbers...", "Mashing buttons...", "Pulling levers...", "Getting more info...", "Powering up...", "Counting to 10000...", "Thinking about puppies...", "Thinking about kittens...", "Thinking about ice cream...", "Doing crossword...", "Playing sudoku...", "Contacting mothership...", "Pondering life...", "Checking teeth...", "Buying lottery tickets...", "Double rainbowing...", "Doing algebra...", "Doing calculus...", "Doing long division...", "Flipping record...", "Showering...", "Contemplating...", "Lubricating...", "Making pit stop...", "Visiting restroom...", "Sprocketing sprockets...", "Kicking tires...", "Cutting and pasting...", "" ];
            return a[Math.floor(Math.random() * a.length)];
        },
        setNavBarTitle: function(a) {
            b.Utilities.isUnitTesting === !1 && e(".nav-bar-title").html(a);
        },
        showAddressBar: function(a) {
            if (b.Utilities.isUnitTesting === !1) {
                if (null !== a && e(".address-text").html(a), e(".address-bar").height() > 77) return;
                e(".address-bar").animate({
                    height: "78px"
                }, 100);
            }
        },
        hideAddressBar: function() {
            b.Utilities.isUnitTesting === !1 && (e(".address-bar").animate({
                height: "30px"
            }, 100), e(".place-button-active").removeClass("place-button-active ui-state-persist"));
        },
        getMoreFreeGames: function() {
            var a = this;
            a.showSpinner("Retrieving...");
            var c = function(b) {
                var c = "";
                c = "AD_RECEIVED" == b.RevMobAdsEvent ? "Ad received!" : "AD_DISMISS" == b.RevMobAdsEvent ? "Ad dismiss!" : "AD_CLICKED" == b.RevMobAdsEvent ? "Ad clicked!" : "AD_DISPLAYED" == b.RevMobAdsEvent ? "Ad displayed!" : b.RevMobAdsEvent, 
                console.log("Revmob message: " + c), a.hideSpinner();
            }, d = function(c) {
                var d = "";
                d = "AD_NOT_RECEIVED" == c.RevMobAdsEvent ? "Ad not received!" : c.RevMobAdsEvent, 
                console.log("Revmob error message: " + d), a.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops.", "Something happened. Please try your request again.", !0, !0);
            };
            window.plugins.revMob.openAdLink(c, d);
        },
        rateApp: function() {
            window.open("http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?id=397304605&pageNumber=0&sortOrdering=1&type=Purple+Software&mt=8", "_blank");
        },
        deleteAccount: function() {
            confirm({
                header: "DANGER!!!",
                message: "Deleting your account will remove ALL your data. Any rounds you've created will be deleted and other players will no longer be able to access them.",
                confirmButton: "Yes, delete",
                cancelButton: "No, cancel"
            }, function() {
                setTimeout(function() {
                    confirm({
                        header: "Are you REAALLLLY sure?",
                        message: "Deleting your account is not reversible. There is no undo. This is what it sounds like when doves cry.",
                        confirmButton: "Delete me!",
                        cancelButton: "No, cancel"
                    }, function() {
                        console.log("delete my account called from MainController.js"), b.Utilities.deleteUserAccountAndDataFromParse().then(function() {}, function(a) {
                            console.log("Main.Controller.deleteAccount eror returned: " + JSON.stringify(a));
                            var b = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                            Parse.Analytics.track("error", {
                                code: b
                            });
                        });
                    });
                }, 200);
            });
        }
    }, a.Controller.initialize();
}), BGS.module("MainApp.Main", function(a, b, c, d, e, f) {
    a.LeftPanelView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("left-panel"));
        },
        onShow: function() {
            console.log("on show panel");
        },
        el: "#sliding-sidebar",
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .menu-my-scorecard": "goToMyScorecard",
                "touchend .menu-leaderboard": "goToLeaderboard",
                "touchend .menu-player": "goToPlayerProfile",
                "touchend .menu-join-round": "goToJoinRound",
                "touchend .menu-create-round": "goToCreateRound",
                "touchend .menu-rules": "goToRules",
                "touchend .menu-current-round": "goToRoundSetup",
                "touchend .menu-legal": "goToLegal",
                "touchend .menu-acknowledgements": "goToAcknowledgements",
                "touchend .menu-disclaimer": "goToDisclaimer",
                "touchend .menu-rate": "goToRate",
                "touchend .menu-free-games": "goToFreeGames",
                "touchend .menu-logout": "goToLogOut",
                "touchmove #left-panel": "scrollViewIsScrolling",
                "touchstart li": "highlightItem",
                "touchend li": "unhighlightItem"
            }) : f.extend(a, {
                "click .menu-my-scorecard": "goToMyScorecard",
                "click .menu-leaderboard": "goToLeaderboard",
                "click .menu-player": "goToPlayerProfile",
                "click .menu-join-round": "goToJoinRound",
                "click .menu-create-round": "goToCreateRound",
                "click .menu-rules": "goToRules",
                "click .menu-current-round": "goToRoundSetup",
                "click .menu-legal": "goToLegal",
                "click .menu-acknowledgements": "goToAcknowledgements",
                "click .menu-disclaimer": "goToDisclaimer",
                "click .menu-rate": "goToRate",
                "click .menu-free-games": "goToFreeGames",
                "click .menu-logout": "goToLogOut",
                "mousemove #left-panel": "scrollViewIsScrolling",
                "mousedown li": "highlightItem",
                "click li": "unhighlightItem"
            }), a;
        },
        showCurrentRoundOptions: function() {
            e(".current-round-options").show(), "undefined" != typeof this.sv && this.sv.refresh();
        },
        hideCurrentRoundOptions: function() {
            e(".current-round-options").hide(), "undefined" != typeof this.sv && this.sv.refresh();
        },
        goToMyScorecard: function() {
            this.goToMenuItem(".menu-my-scorecard");
        },
        goToLeaderboard: function() {
            this.goToMenuItem(".menu-leaderboard");
        },
        goToPlayerProfile: function() {
            this.goToMenuItem(".menu-player");
        },
        goToJoinRound: function() {
            this.goToMenuItem(".menu-join-round");
        },
        goToLegal: function() {
            this.goToMenuItem(".menu-legal");
        },
        goToAcknowledgements: function() {
            this.goToMenuItem(".menu-acknowledgements");
        },
        goToDisclaimer: function() {
            this.goToMenuItem(".menu-disclaimer");
        },
        goToRate: function() {
            this.goToMenuItem(".menu-rate");
        },
        goToFreeGames: function() {
            this.goToMenuItem(".menu-free-games");
        },
        highlightItem: function(a) {
            var b = this;
            this.isScrolling = !1, setTimeout(function() {
                b.isScrolling === !1 && (e(a.target).closest(".left-menu-link").css({
                    "-webkit-transform": "scale3d(1.05, 1.05, 1)"
                }), e(a.target).closest(".lt-purple").addClass("accent-color-box-wide").removeClass("accent-color-box"));
            }, 200);
        },
        unhighlightItem: function(a) {
            setTimeout(function() {
                e(".lt-purple").removeClass("accent-color-box-wide").addClass("accent-color-box"), 
                e(a.target).closest(".left-menu-link").css({
                    "-webkit-transform": "scale3d(1.0, 1.0, 1)"
                }), e(a.target).closest(".lt-purple.div").removeClass("accent-color-box-wide").addClass("accent-color-box");
            }, 300), this.isScrolling = !1;
        },
        goToCreateRound: function() {
            if (this.isScrolling) return this.isScrolling = !1, void 0;
            if (!this.hasBeenClicked) {
                var c = this;
                setTimeout(function() {
                    a.Controller.hideAddressBar(), c.hasBeenClicked = !1, confirm({
                        header: "Create New Round?",
                        message: "This new round will become the active round. If you have other rounds, they will be deactivated and other players will no longer be able to make scoring updates to them.",
                        confirmButton: "Continue",
                        cancelButton: "No, cancel"
                    }, function() {
                        b.MainApp.Main.Controller.showSpinner("Creating new round..."), setTimeout(function() {
                            a.Controller.closeSlidingView(function() {
                                a.Controller.loadRSApp(shouldCreateNew = !0);
                            });
                        }, 300);
                    });
                }, 200);
            }
        },
        goToRules: function() {
            this.goToMenuItem(".menu-rules");
        },
        goToRoundSetup: function() {
            this.goToMenuItem(".menu-current-round");
        },
        goToLogOut: function() {
            this.goToMenuItem(".menu-logout");
        },
        goToMenuItem: function(c) {
            if (this.isScrolling) return this.isScrolling = !1, void 0;
            if (c && !this.hasBeenClicked) {
                var d = this;
                setTimeout(function() {
                    a.Controller.hideAddressBar(), a.Controller.closeSlidingView(function() {
                        d.hasBeenClicked = !1, ".menu-my-scorecard" == c ? a.Controller.loadScorecardApp() : ".menu-leaderboard" == c ? a.Controller.showView(a.Controller.leaderboardView(), a.Controller.noEffect()) : ".menu-player" == c ? a.Controller.showView(a.Controller.playerView(), a.Controller.noEffect()) : ".menu-join-round" == c ? console.log("show join round view") : ".menu-rules" == c ? console.log("show rules view") : ".menu-current-round" == c ? a.Controller.loadRSApp(shouldCreateNew = !1) : ".menu-acknowledgements" == c ? console.log("app acknowledgements") : ".menu-disclaimer" == c ? console.log("app disclaimer") : ".menu-legal" == c ? console.log("app privacy/tos") : ".menu-rate" == c ? a.Controller.rateApp() : ".menu-free-games" == c ? a.Controller.getMoreFreeGames() : ".menu-logout" == c && b.StartApp.Start.Controller.logOut();
                    });
                }, 200);
            }
        },
        scrollViewIsScrolling: function() {
            e(".lt-purple").removeClass("accent-color-box-wide").addClass("accent-color-box"), 
            e(".left-menu-link").css({
                "-webkit-transform": "scale3d(1.0, 1.0, 1)",
                color: "rgb(198, 200, 200)"
            }), this.isScrolling = !0;
        },
        createMenuScrollView: function(a) {
            var b = this;
            setTimeout(function() {
                b.sv = new iScroll(a, {
                    hScroll: !1,
                    hScrollbar: !1,
                    vScrollbar: !1,
                    topOffset: 0,
                    hideScrollbar: !0,
                    fadeScrollbar: !0,
                    lockDirection: !0,
                    yMinDistance: -500,
                    yMaxDistance: 200
                }), e("#" + a).css("height", "100%"), b.sv.refresh();
            }, 500);
        },
        onRender: function() {
            this.createMenuScrollView("sliding-sidebar"), this.hasBeenClicked = !1;
        }
    }), a.UsernameView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("username"));
        },
        el: ".username"
    });
}), BGS.module("MainApp.Main", function(a, b, c, d, e, f) {
    a.MainView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("main"));
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() && f.extend(a, {
                "touchmove #nav-container": "hideNotifications"
            }), a;
        },
        hideNotifications: function() {
            a.Controller.dismissAnyNotification();
        },
        onRender: function() {
            var c = this;
            e("#container").removeClass(".bg-slategray").addClass("bg-light"), e(".right-header-button").hide(), 
            a.Controller.loadChildViews();
            var d = e(".menu-logout"), f = e(".log-in-log-out");
            if (Parse.User.current()) {
                f.prepend('<div class="accent-color-box lt-purple"><li class="topcoat-list__item--first delete-account"><a class="anton-font">Delete Account</a></li></div>'), 
                e(".delete-account").on("touchmove mousemove", function() {
                    c.isScrolling = !0;
                });
                var g = b.Utilities.isMobileDevice() ? "touchend" : "click";
                e(".delete-account").on(g, function() {
                    c.isScrolling === !1 ? (console.log("delete account clicked; we should delete the account now"), 
                    a.Controller.deleteAccount()) : c.isScrolling = !1;
                }), d.html('<a class="anton-font">Log out</a>'), d.removeClass("topcoat-list__item--first").addClass("topcoat-list__item"), 
                a.Controller.loadUsername();
            } else d.html('<a class="anton-font">Log in/Sign up</a>');
            d = null, a.Controller.setNavController(), a.Controller.calculateNavControllerHeight(), 
            e("#left-panel").removeAttr("style"), a.Controller.createSlidingView(), e("#help-panel").slidePanel({
                triggerName: "#panel-trigger",
                triggerTopPos: "46px",
                panelTopPos: "48px",
                ajax: !0,
                ajaxSource: "signup.html"
            }), b.StartApp.Start.Controller.offsetStatusBar();
        }
    }), a.HeaderView = c.Marionette.ItemView.extend({
        el: ".header"
    }), a.PlacesBarView = c.Marionette.ItemView.extend({
        el: ".places-bar",
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .bar-list-button": "goToBarList",
                "touchend .taxi-list-button": "goToTaxiList"
            }) : f.extend(a, {
                "click .bar-list-button": "goToBarList",
                "click .taxi-list-button": "goToTaxiList"
            }), a;
        },
        goToBarList: function() {
            console.log("MainView goToBarList:"), e(".bar-list-button").hasClass("place-button-active") || (this.selectMenuItem("bar-list-button"), 
            a.Controller.loadPlacesApp("bars"));
        },
        goToTaxiList: function() {
            console.log("MainView goToTaxiList:"), e(".taxi-list-button").hasClass("place-button-active") || (this.selectMenuItem("taxi-list-button"), 
            a.Controller.loadPlacesApp("taxis"));
        },
        selectMenuItem: function(a) {
            e(".place-button-active").removeClass("place-button-active ui-state-persist"), a && e("." + a).addClass("place-button-active ui-state-persist");
        }
    }), a.AddressBarView = c.Marionette.ItemView.extend({
        el: ".address-bar",
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("address-bar"));
        },
        initialize: function() {},
        onRender: function() {}
    }), a.HelpView = c.Marionette.ItemView.extend({
        el: "#simplemodal-data",
        initialize: function(a) {
            this.template = f.template(b.Utilities.templateLoader.get(a.templateView));
        },
        onRender: function() {
            var a = this;
            setTimeout(function() {
                a.createHelpScrollView(null, 0, function() {
                    var b = parseInt(e("#simplemodal-data").css("height"), 10);
                    e("#iscroll-help-wrapper").css("height", b - 6), b = null, a.helpScrollView.refresh(), 
                    e(".modalClose").on("click", function() {
                        console.log("close button clicked"), e.modal.close();
                    });
                });
            }, 100);
        },
        createHelpScrollView: function(a, b, c) {
            var d = this;
            setTimeout(function() {
                d.helpScrollView = new IScroll("#iscroll-help-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: 0
                }), e.isFunction(c) && c();
            }, 100);
        }
    });
}), BGS.module("PlacesApp.Places", function(a, b, c, d, e) {
    a.Controller = {
        initialize: function(a) {
            "bars" === a.type ? this.showBars(a) : this.showTaxis(a);
        },
        showView: function(a, c, d) {
            b.containerRegion.show(a), e.isFunction(d) && d();
        },
        showBars: function(c) {
            var d = this;
            this.options = c, Parse.Analytics.track("findBars"), "undefined" != typeof this.listLayout && this.listLayout.close(), 
            this.listLayout = new a.Layout(), this.listLayout.on("show", function() {
                setTimeout(function() {
                    d.options.itemView = a.BarItemView, d.placesListView = d.placesListBarView(d.options), 
                    d.manualEntryView = d.placesManualEntryView(d.options), d.listLayout.listRegion.show(d.placesListView), 
                    d.listLayout.dataRegion.show(d.manualEntryView), d.manualEntryView.on("show", function() {
                        b.MainApp.Main.Controller.hideSpinner("");
                    });
                }, 0);
            }), this.showView(this.listLayout, this.noEffect());
        },
        showTaxis: function(b) {
            this.options = b;
            var c = this;
            this.options = b, Parse.Analytics.track("findTaxis"), "undefined" != typeof this.listLayout && this.listLayout.close(), 
            this.listLayout = new a.Layout(), this.listLayout.on("show", function() {
                setTimeout(function() {
                    c.options.itemView = a.TaxiItemView, c.placesListView = c.placesListTaxiView(c.options), 
                    c.listLayout.listRegion.show(c.placesListView);
                }, 0);
            }), this.showView(this.listLayout, this.noEffect());
        },
        showMap: function(a) {
            var b = {
                collectionCount: "" + a.length
            };
            Parse.Analytics.track("showBarMap", b), this.options.collection = a, this.showView(this.placesMapLayoutView(this.options));
        },
        queryFoursquarePlaces: function(a, c) {
            var d = this;
            a.refresh !== !0 && b.MainApp.Main.Controller.showSpinner("Retrieving nearby bars..."), 
            b.FoursquareAPI.fsqGetNearbyResults(a).then(function(a, b, f) {
                d.userLocation = f;
                var g = "success";
                e.isFunction(c) && c(g, a);
            }, function(a) {
                var b = a;
                e.isFunction(c) && c(b);
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: d
                });
            });
        },
        queryGooglePlaces: function(a, c, d, f) {
            d !== !0 && b.MainApp.Main.Controller.showSpinner("Retrieving local taxis..."), 
            b.GoogleAPI.googleGetNearbyResults(a, c, d).then(function(a) {
                var b = "success";
                e.isFunction(f) && f(b, a);
            }, function(a) {
                var b = a;
                e.isFunction(f) && f(b);
                var c = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: c
                });
            });
        },
        callPlace: function(a) {
            var c = this.getModelFromMapViewCollection(a);
            c.get("contact").formattedPhone ? document.location = "tel:" + c.get("contact").formattedPhone : b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! We had trouble calling this place.", "Please try again.", isError = !0, showAtBottom = !0);
        },
        addPlaceAsHole: function(a, b) {
            var c = b.hole, d = this.getModelFromMapViewCollection(a), e = new Parse.GeoPoint({
                latitude: d.get("location").lat,
                longitude: d.get("location").lng
            });
            c.set("name", d.get("name")), c.set("location", e), this.saveHole(c);
        },
        saveHole: function(a) {
            console.log("PlacesController.holetoupdate = " + JSON.stringify(a)), a.save({
                success: function() {
                    console.log("saveHole successfully"), b.RSApp.RoundSetup.Controller.modifyHoles();
                },
                error: function(a) {
                    console.log("saveHole e updating hole: " + JSON.stringify(a));
                }
            });
        },
        getModelFromMapViewCollection: function(a) {
            var b = e(a.currentTarget).data("id"), c = this.placesMapView.collection.get(b);
            return c;
        },
        placesListBarView: function(b) {
            return new a.ListBars(b);
        },
        placesManualEntryView: function(b) {
            return new a.ManualEntryHoleDataView(b);
        },
        placesListTaxiView: function(b) {
            return new a.ListTaxis(b);
        },
        placesMapLayoutView: function(b) {
            var c = this, d = new a.MapLayout();
            return d.on("show", function() {
                setTimeout(function() {
                    c.placesMapView = new a.Map(b), c.placesMapView.on("show", function() {
                        c.placesMapView.loadMap(c.userLocation || "");
                    }), c.placesMapMenuView = new a.MapMenu(), d.mapRegion.show(c.placesMapView), d.menuRegion.show(c.placesMapMenuView);
                }, 0);
            }), d;
        },
        noEffect: function() {
            return new BackStack.NoEffect();
        },
        disableEvents: function() {
            this.placesMapView && this.placesMapView.undelegateEvents(), this.placesMapMenuView && this.placesMapMenuView.undelegateEvents(), 
            this.placesListView && this.placesListView.undelegateEvents(), this.manualEntryView && this.manualEntryView.undelegateEvents();
        },
        enableEvents: function() {
            this.placesMapView && this.placesMapView.delegateEvents(), this.placesMapMenuView && this.placesMapMenuView.delegateEvents(), 
            this.placesListView && this.placesListView.delegateEvents(), this.manualEntryView && this.manualEntryView.delegateEvents();
        }
    };
}), BGS.module("PlacesApp.Places", function(a, b, c, d, e, f) {
    a.Layout = c.Marionette.Layout.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("list-layout"));
        },
        regions: {
            listRegion: "#list-region",
            dataRegion: "#data-region"
        }
    }), a.List = c.Marionette.CompositeView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("places-list"));
        },
        itemViewContainer: ".places-list",
        events: function() {
            var a = {
                "keypress #search-field": "searchOnEnter",
                "click .try-again": "errorReload",
                "click #search-field": "setFocus"
            };
            return a;
        },
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        remove: function() {
            this.undelegateEvents();
        },
        setFocus: function(a) {
            a.stopImmediatePropagation(), e("#search-field").select();
        },
        searchOnEnter: function(a) {
            13 == a.keyCode && (e("input:focus").blur(), a.preventDefault(), this.isSearching = !0);
        },
        modelChanged: function() {},
        modelAdded: function() {},
        onBeforeRender: function() {},
        onRender: function() {},
        refreshScrollView: function() {
            var a = this;
            setTimeout(function() {
                a.sv.refresh();
            }, 500);
        },
        createScrollView: function(a, c) {
            var d = this;
            setTimeout(function() {
                var f = document.getElementById("pullDown"), g = f.offsetHeight;
                d.sv = new IScroll("#iscroll-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    startY: "bars" == d.options.type ? a.shouldModifySingleHole === !0 ? -58 : -65 : -25
                }), d.sv.on("refresh", function() {
                    f.className.match("loading") && (f.className = "", f.querySelector(".pullDownLabel").innerHTML = "Pull down to refresh...");
                }), d.sv.on("scrollMove", function() {
                    d.sv.y > 20 && !f.className.match("flip") ? (f.className = "flip", f.querySelector(".pullDownLabel").innerHTML = "Release to refresh...") : d.sv.y < 20 && f.className.match("flip") && (f.className = "", 
                    f.querySelector(".pullDownLabel").innerHTML = "Pull down to refresh...");
                }), d.sv.on("scrollEnd", function() {
                    f.className.match("flip") && (b.MainApp.Main.Controller.showSpinner(), f.className = "loading", 
                    f.querySelector(".pullDownLabel").innerHTML = "Loading...", d.pullDownAction(a)), 
                    d.sv.y > -25 && d.sv.y < 21 && !f.className.match("flip") && d.sv.scrollTo(0, -g + 42, 300);
                });
                var h = parseInt(e("#container").css("height"), 10), i = parseInt(e(".header").css("height"), 10), j = a.showAddressBar !== !1 ? 0 : -50, k = h - (i + j) - 25, l = e("#iscroll-wrapper");
                l.css("height", k), a.showAddressBar !== !1 ? l.css("margin-top", "0px") : l.css("margin-top", "-10px"), 
                d.sv.enabled = !0, d.sv.refresh(), e.isFunction(c) && c(), k = null, b.MainApp.Main.Controller.hideSpinner("service list view");
            }, 100);
        },
        showErrorMessage: function(a) {
            var c = "undefined" != typeof a.code ? "" + a.code : "" + a;
            if (Parse.Analytics.track("error", {
                code: c
            }), console.log("showErrorMessage error: " + a), b.Utilities.isUnitTesting === !1) {
                e(".request-error").remove(), e(".places-list").html(""), this.sv ? this.sv.enabled = !1 : e("#iscroll-wrapper").hide(), 
                e("#iscroll-wrapper").height("100%!important");
                var d = "";
                d = this.isSearching === !0 ? "<div class='request-error'><br><br><br>Well, shoot. " + a + "<br>Try broadening your search or you can <span class='try-again'><u>reload the places nearest you</u></span>.</div>" : '"Finding your current location failed.  Ensure location services are enabled on your device and try again."' == a ? "<div class='request-error'><br><br><br>Oops. Finding your current location failed.<br>Ensure location services are enabled on your device and <span class='try-again'><u>try your request</u></span> again.</div>" : "<div class='request-error'><br><br><br>Well, this stinks. Something happened. <br>Please <span class='try-again'><u>try your request</u></span> again. If the problems persists, try logging out of Bar Golf Stars and logging back in.</div>", 
                e("#iscroll-wrapper").append(d), e(".right-header-button").hide().unbind(), b.MainApp.Main.Controller.hideSpinner("service list view e"), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Error message: " + a, isError = !0, showAtBottom = !0);
            }
        },
        errorReload: function(a) {
            a.stopImmediatePropagation(), this.pullDownAction(), this.isSearching = !1;
        }
    }), a.ListBars = a.List.extend({
        initialize: function(a) {
            if (a.shouldModifySingleHole === !0) b.MainApp.Main.Controller.setNavBarTitle("Select Hole #" + this.options.hole.get("holeNum")), 
            this.options.searchType = "bars", this.options.showAddressBar = !1, this.getFoursquarePlaceCollection(this.options); else {
                b.MainApp.Main.Controller.setNavBarTitle("Find a Bar");
                var c = {};
                c.searchType = "bars", this.options.showAddressBar = c.showAddressBar = !0, this.getFoursquarePlaceCollection(c);
            }
            this.buttonClicked = !1;
        },
        remove: function() {
            this.undelegateEvents(), e(".right-header-button").unbind();
        },
        showMapClicked: function() {
            var b = this;
            this.options.shouldModifySingleHole === !0 && (this.options.isMultipleHoles = !0), 
            this.buttonClicked === !1 && a.Controller.showMap(this.collection, this.options), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500);
        },
        getFoursquarePlaceCollection: function(b) {
            var c = this;
            a.Controller.queryFoursquarePlaces(b, function(a, d) {
                "success" === a ? (c.collection = d, c.renderUI(b)) : c.showErrorMessage(a);
            });
        },
        searchOnEnter: function(a) {
            if (13 == a.keyCode) {
                e("input:focus").blur(), b.MainApp.Main.Controller.showSpinner(), this.isSearching = !0;
                var c = {};
                c.searchTerm = e("#search-field").val(), c.searchType = "bars", c.refresh = !0, 
                c.showAddressBar = this.options.showAddressBar, this.getFoursquarePlaceCollection(c);
            }
        },
        renderUI: function(c) {
            var d = this;
            b.MainApp.Main.Controller.hideSpinner();
            var f = e(".places-list");
            f.html(""), f.css("height", 0), f = null, this.render(), this.createScrollView(c, function() {
                e(".search-field").show(), e(".container-bar").html("<div class='foursquare-logo-row'></div>"), 
                e(".right-header-button span").html("View Map"), e(".right-header-button").show().on("click", function() {
                    d.showMapClicked();
                }), e(".places-list li:even").addClass("lt-lt-gray"), e(".places-list li:odd").addClass("no-color"), 
                e(".places-list").append('<li class="spacer"width:100%"></li>'), d.sv.refresh(), 
                setTimeout(function() {
                    c.shouldModifySingleHole === !0 && a.Controller.manualEntryView.showManualEntry(function() {
                        d.sv.refresh();
                    });
                }, 300);
            });
        },
        pullDownAction: function(a) {
            this.isSearching = !1;
            var b = a;
            b.refresh = !0, this.getFoursquarePlaceCollection(b);
        }
    }), a.ListTaxis = a.List.extend({
        initialize: function() {
            b.MainApp.Main.Controller.setNavBarTitle("Call a Taxi"), this.getGooglePlaceCollection("taxis");
        },
        getGooglePlaceCollection: function(b, c, d) {
            var e = this;
            a.Controller.queryGooglePlaces(b, c, d, function(a, b) {
                "success" === a ? (e.collection = b, e.renderUI(e.options)) : e.showErrorMessage(a);
            });
        },
        searchOnEnter: function(a) {
            13 == a.keyCode && this.getGooglePlaceCollection("taxis", e("#search-field").val(), refresh = !0);
        },
        renderUI: function(a) {
            var c = this;
            b.MainApp.Main.Controller.hideSpinner(), e(".places-list").html(""), e(".places-list").css("height", 0), 
            this.render(), this.createScrollView(a, function() {
                e(".search-field").hide(), e(".container-bar").html("<div class='google-logo-row'></div>"), 
                e(".right-header-button").hide().unbind(), e(".places-list li:even").addClass("lt-lt-gray"), 
                e(".places-list li:odd").addClass("no-color"), c.sv.refresh();
            });
        },
        pullDownAction: function() {
            this.isSearching = !1, this.getGooglePlaceCollection("taxis", null, refresh = !0);
        }
    }), a.ManualEntryHoleDataView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("places-manual-entry-hole-data"));
        },
        initialize: function(a) {
            this.originalHoleEntry = a.hole;
        },
        events: function() {
            var a = {
                "keypress #hole-displayname": "saveOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-save-button": "saveHoleClicked",
                "touchend .rs-delete-button": "resetHoleClicked",
                "touchend .rs-cancel-button": "hideManualEntry"
            }) : f.extend(a, {
                "click .rs-save-button": "saveHoleClicked",
                "click .rs-delete-button": "resetHoleClicked",
                "click .rs-cancel-button": "hideManualEntry"
            }), a;
        },
        onRender: function() {
            console.log("ManualEntryHoleDataView onRender");
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        showManualEntry: function(a) {
            console.log("manualEntry showManualEntry");
            var b = e("#data-region"), c = this, d = e(".rs-delete-button");
            "Hole Name Not Added Yet" != c.originalHoleEntry.get("name") ? d.show() : d.hide(), 
            b.slideDown(200, function() {
                e(".spacer").css("height", "190px"), "Hole Name Not Added Yet" != c.originalHoleEntry.get("name") && e("#hole-displayname").val(c.originalHoleEntry.get("name")), 
                e("#hole-name").html("Custom name for hole #" + c.originalHoleEntry.get("holeNum") + ":"), 
                e.isFunction(a) && a();
            }), b.on("click", function() {
                console.log("add hole manually");
            }), b = null;
        },
        hideManualEntry: function() {
            var a = e("#data-region");
            a.slideUp(200, function() {
                b.RSApp.RoundSetup.Controller.modifyHoles();
            }), a = null;
        },
        resetHoleClicked: function() {
            var b = this;
            "Hole Name Not Added Yet" === this.originalHoleEntry.get("name") || confirm({
                header: "Are you sure?",
                message: "Only this hole's name and location will be reset. Any associated scores already added will not be affected.",
                confirmButton: "Yes, reset",
                cancelButton: "No, cancel"
            }, function() {
                b.originalHoleEntry.set("name", "Hole Name Not Added Yet");
                var c = new Parse.GeoPoint();
                b.originalHoleEntry.set("location", c), a.Controller.saveHole(b.originalHoleEntry);
            });
        },
        saveOnEnter: function(a) {
            13 == a.keyCode && (a.preventDefault(), this.saveHoleClicked(a));
        },
        saveHoleClicked: function() {
            if (e("input:focus").blur(), this.validateForm()) {
                if (e("#hole-displayname").val() != this.originalHoleEntry.get("name")) {
                    this.originalHoleEntry.set("name", e("#hole-displayname").val());
                    var b = new Parse.GeoPoint();
                    this.originalHoleEntry.set("location", b);
                }
                var c = this;
                this.buttonClicked !== !0 && (console.log("button clicked so save original hole entry"), 
                a.Controller.saveHole(this.originalHoleEntry), this.buttonClicked = !0), setTimeout(function() {
                    c.buttonClicked = !1;
                }, 500);
            }
        },
        validateForm: function() {
            var a = !0;
            return e("#hole-displayname").val().length < 3 || e("#hole-displayname").val().length > 30 || e("#hole-displayname").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a hole name 3-30 characters long with no special characters.", isError = !0, showAtBottom = !0), 
            a = !1) : a;
        }
    });
}), BGS.module("PlacesApp.Places", function(a, b, c, d, e, f) {
    a.BarItemView = c.Marionette.ItemView.extend({
        tagName: "li",
        model: b.Entities.FoursquarePlace,
        events: function() {
            var a = {
                "click .try-again": "errorReload",
                "click .bar-list-item": "goToBarDetails"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchstart .bar-list-item": "setShouldTakeAction",
                "touchmove .bar-list-item": "preventTakingAction"
            }) : f.extend(a, {
                "mousedown .bar-list-item": "setShouldTakeAction",
                "mousemove .bar-list-item": "preventTakingAction"
            }), a;
        },
        goToBarDetails: function(c) {
            if (c.stopImmediatePropagation(), this.shouldTakeAction === !0) {
                var d = new b.Entities.FoursquarePlaceCollection();
                d.add(this.model), this.buttonClicked === !1 && a.Controller.showMap(d, {
                    type: "bars"
                }), this.buttonClicked = !0;
            }
        },
        setShouldTakeAction: function(a) {
            e(".places-list li").removeClass("ui-highlight-list-row");
            var b = e(a.target).closest("li");
            b.addClass("ui-highlight-list-row"), this.shouldTakeAction = !0, b = null;
        },
        preventTakingAction: function() {
            e(".places-list li").removeClass("ui-highlight-list-row"), this.shouldTakeAction = !1;
        },
        initialize: function() {
            this.buttonClicked = !1;
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("bar-list-item"));
        },
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            console.log("bar modelChanged");
        },
        modelAdded: function() {
            console.log("bar modelAdded"), a.List.refreshScrollView();
        }
    });
}), BGS.module("PlacesApp.Places", function(a, b, c, d, e, f) {
    a.TaxiItemView = c.Marionette.ItemView.extend({
        tagName: "li",
        model: b.Entities.FoursquarePlace,
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .try-again": "errorReload",
                "touchend .taxi-list-item": "getPlaceDetails",
                "touchstart .taxi-list-item": "setShouldTakeAction",
                "touchmove .taxi-list-item": "preventTakingAction"
            }) : f.extend(a, {
                "click .try-again": "errorReload",
                "click .taxi-list-item": "getPlaceDetails",
                "mousedown .taxi-list-item": "setShouldTakeAction",
                "mousemove .taxi-list-item": "preventTakingAction"
            }), a;
        },
        getPlaceDetails: function() {
            var a = this;
            this.shouldTakeAction === !0 && (b.MainApp.Main.Controller.showSpinner("Looking up taxi number..."), 
            b.GoogleAPI.googleGetPlaceDetails(this.model, function(c, d) {
                d == google.maps.places.PlacesServiceStatus.OK ? a.callTaxi(c) : (b.MainApp.Main.Controller.hideSpinner("get taxi list details e"), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! There was an error calling this taxi. Try again.", "Error message: " + d, isError = !0, showAtBottom = !0));
            }));
        },
        callTaxi: function(a) {
            b.MainApp.Main.Controller.hideSpinner("call taxi"), a.get("phone") ? document.location = "tel:" + a.get("phone") : b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! We had trouble retrieving this taxi's phone number.", "Please try again.", isError = !0, showAtBottom = !0);
        },
        setShouldTakeAction: function(a) {
            e(".places-list li").removeClass("ui-highlight-list-row");
            var b = e(a.target).closest("li");
            b.addClass("ui-highlight-list-row"), this.shouldTakeAction = !0;
        },
        preventTakingAction: function() {
            e(".places-list li").removeClass("ui-highlight-list-row"), this.shouldTakeAction = !1;
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("taxi-list-item"));
        }
    });
}), BGS.module("PlacesApp.Places", function(a, b, c, d, e, f) {
    a.MapLayout = c.Marionette.Layout.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("places-map-layout"));
        },
        regions: {
            mapRegion: "#map-region",
            menuRegion: "#menu-region"
        }
    }), a.Map = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("places-map"));
        },
        initialize: function(a) {
            f.bindAll(this), this.options.shouldModifySingleHole === !0 ? b.MainApp.Main.Controller.setNavBarTitle("Bar Location") : b.MainApp.Main.Controller.setNavBarTitle("Find a Bar Map");
            var c = this;
            this.span$ = e(".right-header-button span"), this.span$.html("View List"), this.span$.show().on("click", function() {
                console.log("right header button clicked; showListClicked"), c.showListClicked(a);
            });
        },
        loadMap: function(a) {
            if (a) {
                var c = this, d = a;
                b.MainApp.Main.Controller.showSpinner(), setTimeout(function() {
                    c.options.shouldModifySingleHole === !0 && e("#map-container").css("top", "90px"), 
                    c.map || (c.map = L.mapbox.map("map-container", "woozykk.map-ckxod9y4", {
                        detectRetina: !0,
                        retinaVersion: "woozykk.map-ckxod9y4"
                    }).setView([ d.lat, d.lng ], 13)), c.addCenterOnUserControl(), c.loadMapMarkers(d), 
                    b.MainApp.Main.Controller.hideSpinner();
                    var a = L.mapbox.tileLayer("woozykk.map-ckxod9y4");
                    a.on("ready", function() {
                        c.preventMapboxAttributionHTMLDefault();
                    });
                }, 200);
            } else b.MainApp.Main.Controller.hideSpinner(), this.showListClicked(), b.Utilities.showNotificationWithDismissDelay("Oops! Something happened.", "Please try again.", isError = !0, showAtBottom = !0);
        },
        showUserLocation: function(a) {
            this.geoJSON = [];
            var b = {
                type: "Feature",
                geometry: {
                    type: "Point",
                    coordinates: [ a.lng, a.lat ]
                },
                properties: {
                    title: "Your location",
                    "marker-color": "#5dbb85",
                    "marker-symbol": "star-stroked"
                }
            };
            this.geoJSON.push(b);
        },
        addCenterOnUserControl: function() {
            var a = this;
            L.control.locate({
                locateOptions: {
                    enableHighAccuracy: !0,
                    maximumAge: 3e5
                },
                onLocationError: function() {
                    b.Utilities.showNotificationWithDismissDelay("Oops! Something happened.", "Please try again.", isError = !0, showAtBottom = !0);
                },
                onLocationOutsideMapBounds: function(a) {
                    b.Utilities.showNotificationWithDismissDelay("Oops! Something happened.", a.options.strings.outsideMapBoundsMsg, isError = !0, showAtBottom = !0);
                },
                strings: {
                    title: "Show me where I am",
                    popup: "You are within {distance} {unit} from this point",
                    outsideMapBoundsMsg: "You seem located outside the boundaries of the map"
                }
            }).addTo(a.map);
        },
        loadMapMarkers: function(c) {
            var d = this;
            this.showUserLocation(c), this.collection.each(function(a) {
                var b = {
                    type: "Feature",
                    geometry: {
                        type: "Point",
                        coordinates: [ a.get("location").lng, a.get("location").lat ]
                    },
                    properties: {
                        id: a.get("id"),
                        distance: a.get("location").distance || "",
                        checkinsCount: a.get("stats").checkinsCount || "",
                        usersCount: a.get("stats").usersCount || "",
                        title: a.get("name"),
                        phone: a.get("contact").formattedPhone || "",
                        address1: a.get("location").address || "",
                        address2: (a.get("location").city || "") + ", " + (a.get("location").state || "") + "  " + (a.get("location").postalCode || ""),
                        country: a.get("location").country || "",
                        "marker-color": "#ac90c6",
                        "marker-symbol": "bar"
                    }
                };
                d.geoJSON.push(b);
            }), this.map.markerLayer.on("layeradd", function(a) {
                var c = a.layer, d = c.feature, e = "United States" == d.properties.country ? b.Utilities.convertMeters(d.properties.distance).to("miles") + "mi" : b.Utilities.convertMeters(d.properties.distance).to("kilometers") + "km", f = void 0 !== d.properties.title ? '<div class="popover-title">' + d.properties.title + "</div>" : "", g = void 0 !== d.properties.phone ? '<div class="popover-text">' + d.properties.phone : '<div class="popover-text">', h = void 0 !== d.properties.address1 ? '<div class="popover-text">' + d.properties.address1 + "</div>" : "", i = void 0 !== d.properties.address2 ? '<div class="popover-text">' + d.properties.address2 + "</div>" : "", j = void 0 !== d.properties.distance ? "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + e + " away</div>" : "</div>";
                untrimmedTopRow = g + j, topRow = '<div class="popover-text">' === g ? g + j.replace(/&nbsp;/g, "") : untrimmedTopRow;
                var k = '<div class="map-popover">' + f + '<div class="popover-subtext">' + topRow + h + i + "</div>" + "</div>";
                c.bindPopup(k, {
                    closeButton: !1,
                    minWidth: 200,
                    maxWidth: 200,
                    maxHeight: 100
                });
            }), this.map.markerLayer.setGeoJSON(this.geoJSON), this.map.markerLayer.on("click", function(b) {
                a.Controller.placesMapMenuView.showMenu(b.layer.feature, d.options);
            }), this.map.on("click", function(b) {
                a.Controller.placesMapMenuView.hideMenu(b);
            });
            var e = d.map.markerLayer.getLayers(), f = e[1].feature;
            e.length < 3 && (e[1].openPopup(), d.map.setView(e[1].getLatLng(), 14), a.Controller.placesMapMenuView.showMenu(f, d.options)), 
            this.map.fitBounds(this.map.markerLayer.getBounds());
        },
        preventMapboxAttributionHTMLDefault: function() {
            e(".leaflet-control-attribution a").on("click", function(a) {
                a.preventDefault(), window.open("http://mapbox.com/about/maps", "_system", "location=yes");
            });
        },
        onRender: function() {
            this.buttonClicked = !1;
        },
        showListClicked: function() {
            this.buttonClicked === !1 && a.Controller.showBars(this.options), this.buttonClicked = !0;
        },
        remove: function() {
            this.span$.unbind(), e(".leaflet-control-attribution a").unbind(), this.undelegateEvents();
        }
    }), a.MapMenu = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("places-map-menu"));
        },
        initialize: function() {},
        onRender: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        showMenu: function(a, b) {
            var c = a, d = this;
            if (this.options = b, "Your location" != c.properties.title) {
                var f = '<div class="call-menu-item" data-id="' + c.properties.id + '">Call ' + c.properties.title + "</div>", g = "";
                "undefined" != typeof b && b.shouldModifySingleHole === !0 && (g = '<div class="add-hole-menu-item" data-id="' + c.properties.id + '">Add ' + c.properties.title + " as hole #" + b.hole.get("holeNum") + "</div>");
                var h = f + g, i = e(".places-map-menu"), j = e("#menu-region");
                i.html(""), i.append(h), j.append(i), j.slideDown(200), e(".call-menu-item").on("click", function(a) {
                    d.callPlaceClicked(a);
                }), e(".add-hole-menu-item").on("click", function(a) {
                    d.addPlaceAsHoleClicked(a);
                });
            } else this.hideMenu();
        },
        hideMenu: function() {
            var a = e(".places-map-menu"), b = e("#menu-region");
            b.slideUp(200, function() {
                a.html(""), b = null;
            });
        },
        callPlaceClicked: function(b) {
            var c = this;
            this.buttonClicked === !1 && (a.Controller.callPlace(b), this.buttonClicked = !0), 
            setTimeout(function() {
                c.buttonClicked = !1;
            }, 500);
        },
        addPlaceAsHoleClicked: function(b) {
            var c = this;
            this.buttonClicked === !1 && (a.Controller.addPlaceAsHole(b, this.options), this.buttonClicked = !0), 
            setTimeout(function() {
                c.buttonClicked = !1;
            }, 500);
        }
    });
}), BGS.module("RSApp.RoundSetup", function(a, b, c, d, e) {
    a.Controller = {
        initialize: function(a) {
            var c = this;
            a === !0 ? c.createNewRound().then(function() {
                return c.createNewScorecard();
            }).then(function() {
                c.showRoundSetupOptions(a = !0), b.MainApp.Main.Controller.leftPanelView.showCurrentRoundOptions(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "Your new round was successfully created.", isError = !1, showAtBottom = !0);
            }, function(a) {
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: d
                }), console.log("createNewRound e = " + JSON.stringify(a)), b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.leftPanelView.hideCurrentRoundOptions(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Creating your new round failed. Please try again.", isError = !0, showAtBottom = !0), 
                c.round.destroy(), c.scorecard.destroy();
            }) : (c.showRoundSetupOptions(a = !1), b.MainApp.Main.Controller.leftPanelView.showCurrentRoundOptions());
        },
        showView: function(a, c, d) {
            b.MainApp.Main.Controller.showSpinner("Loading..."), b.containerRegion.show(a), 
            e.isFunction(d) && d();
        },
        showRoundSetupOptions: function(a) {
            this.showView(this.roundSetupOptions({
                newRound: a
            }), this.noEffect());
        },
        modifyPlayers: function() {
            var c = this, d = b.request("rs:player:entities");
            e.when(d).done(function(b) {
                c.showView(c.roundSetupPlayerView({
                    itemView: a.PlayerItemView,
                    collection: b
                }), c.noEffect());
            });
        },
        getPlayers: function() {
            var a = new Parse.Promise();
            return fetchingPlayers = b.request("rs:player:entities"), e.when(fetchingPlayers).done(function(b) {
                console.log("when fetchingPlayers done called"), b.length > 0 ? a.resolve("Players available.") : a.reject("No players available.");
            }), a;
        },
        modifyHoles: function() {
            var a = b.request("scorecard:hole:entities"), c = this;
            e.when(a).done(function(a) {
                c.goToHolesView(a);
            });
        },
        getHoles: function() {
            var a = new Parse.Promise();
            return fetchingHoles = b.request("scorecard:hole:entities"), e.when(fetchingHoles).done(function(b) {
                b.length > 0 ? a.resolve("Holes available.") : a.reject("No holes available.");
            }), a;
        },
        modifySingleHole: function(a) {
            setTimeout(function() {
                b.MainApp.Main.Controller.showSpinner();
            }, 0);
            var c = {
                type: "bars",
                shouldModifySingleHole: !0,
                refresh: !0,
                hole: a
            };
            b.PlacesApp.Places.Controller.showBars(c);
        },
        automaticCourseSetup: function() {
            var a = this;
            confirm({
                header: "Are you sure?",
                message: "This action will overwrite any current holes and scores added. Also, we'll do our best to find the nearest bars to you and populate the course automatically. However, we can't guarantee perfect results so you might wanna double-check our efforts.",
                confirmButton: "Continue",
                cancelButton: "No, cancel"
            }, function() {
                var c = b.request("scorecard:hole:entities:automatic-setup");
                e.when(c).done(function(b) {
                    a.goToHolesView(b);
                }), Parse.Analytics.track("automaticCourseSetup");
            });
        },
        goToHolesView: function(b) {
            this.showView(this.roundSetupHoleView({
                itemView: a.HoleItemView,
                collection: b
            }), this.noEffect());
        },
        customizeDrinks: function() {
            var c = this;
            b.MainApp.Main.Controller.makeRequest("round:rule:drink:entities").then(function(b) {
                c.showView(c.roundSetupRuleView({
                    itemView: a.RuleItemView,
                    type: "drink",
                    collection: b
                }), c.noEffect());
            });
        },
        customizeBonuses: function() {
            var c = this;
            b.MainApp.Main.Controller.makeRequest("round:rule:bonus:entities").then(function(b) {
                c.showView(c.roundSetupRuleView({
                    itemView: a.RuleItemView,
                    type: "bonus",
                    collection: b
                }), c.noEffect());
            });
        },
        customizePenalties: function() {
            var c = this;
            b.MainApp.Main.Controller.makeRequest("round:rule:penalty:entities").then(function(b) {
                c.showView(c.roundSetupRuleView({
                    itemView: a.RuleItemView,
                    type: "penalty",
                    collection: b
                }), c.noEffect());
            });
        },
        roundSetupOptions: function(b) {
            return new a.OptionsListView(b);
        },
        roundSetupPlayerView: function(b) {
            var c = this;
            return "undefined" != typeof this.listLayout && this.listLayout.close(), this.listLayout = new a.Layout(), 
            this.listLayout.on("show", function() {
                setTimeout(function() {
                    c.roundSetupListPlayersView = new a.ListPlayersView(b), c.roundSetupPlayerDataView = new a.PlayerDataView(), 
                    e("#data-region").css("height", "60%"), c.listLayout.listRegion.show(c.roundSetupListPlayersView), 
                    c.listLayout.dataRegion.show(c.roundSetupPlayerDataView);
                }, 0);
            }), this.listLayout;
        },
        roundSetupHoleView: function(b) {
            var c = this;
            return "undefined" != typeof this.listLayout && this.listLayout.close(), this.listLayout = new a.Layout(), 
            this.listLayout.on("show", function() {
                setTimeout(function() {
                    c.roundSetupListHolesView = new a.ListHolesView(b), c.listLayout.listRegion.show(c.roundSetupListHolesView);
                }, 0);
            }), this.listLayout;
        },
        roundSetupRuleView: function(b) {
            var c = this;
            return "undefined" != typeof this.listLayout && this.listLayout.close(), this.listLayout = new a.Layout(), 
            this.listLayout.on("show", function() {
                setTimeout(function() {
                    c.roundSetupListRulesView = new a.ListRulesView(b), c.roundSetupRuleDataView = new a.RuleDataView(), 
                    e("#data-region").css("height", "60%"), c.listLayout.listRegion.show(c.roundSetupListRulesView), 
                    c.listLayout.dataRegion.show(c.roundSetupRuleDataView);
                }, 0);
            }), this.listLayout;
        },
        noEffect: function() {
            return new BackStack.NoEffect();
        },
        fadeEffect: function() {
            return new BackStack.FadeEffect();
        },
        savePlayer: function(a) {
            b.MainApp.Main.Controller.showSpinner("Saving...");
            var c = new Parse.Promise();
            return a.save().then(function(a) {
                var d = b.request("rs:player:new");
                e.when(d).done(function() {
                    return b.MainApp.Main.Controller.hideSpinner(), c.resolve(a);
                });
            }, function(a) {
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: d
                }), b.MainApp.Main.Controller.hideSpinner(), c.reject(a);
            }), c;
        },
        deletePlayer: function(a) {
            var c = new Parse.Promise();
            return a.destroy().then(function(a) {
                var d = b.request("rs:player:new");
                e.when(d).done(function() {
                    console.log("deletePlayer addingDefaultPlayer returned");
                    var d = b.request("rs:player:renumber");
                    e.when(d).done(function() {
                        return c.resolve(a);
                    });
                });
            }, function(a) {
                var b = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: b
                }), c.reject(a);
            }), c;
        },
        deleteCurrentRound: function() {
            var a = this, c = Parse.User.current();
            Parse.Cloud.run("deleteRound", {
                round: a.round.id
            }, {
                success: function(a) {
                    return c.set("currentActiveRound", null), c.save(), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                    b.MainApp.Main.Controller.leftPanelView.hideCurrentRoundOptions(), b.MainApp.Main.Controller.loadScorecardApp(), 
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Round deleted.", "Successfully deleted round and all associated data.", isError = !1, showAtBottom = !0)), 
                    a;
                },
                error: function(a) {
                    var c = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                    return Parse.Analytics.track("error", {
                        code: c
                    }), console.log("RoundSetup.deleteCurrentRound cloud code called back e " + JSON.stringify(a)), 
                    setTimeout(function() {
                        b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error", "Delete round failed with error: " + JSON.stringify(a), isError = !0, showAtBottom = !0));
                    }, 300), a;
                }
            });
        },
        createNewRound: function(a) {
            var c = Parse.User.current() || a, d = this, e = new Parse.Promise();
            Round = Parse.Object.extend("Round"), d.round = new Round(), d.round.set("user", c), 
            d.round.set("title", c.get("displayName") + "'s Awesome Round"), d.round.set("isPublic", !1), 
            d.round.set("isActive", !0);
            var f = new Parse.ACL(Parse.User.current());
            return f.setPublicReadAccess(!0), d.round.setACL(f), Parse.Analytics.track("createNewRound"), 
            b.MainApp.Main.Controller.makeRequest("rule:default:entities").then(function(a) {
                var b = [];
                a.each(function(a) {
                    "undefined" != typeof a.id && b.push(a.id);
                }), d.round.set("rules", b);
            }).then(function() {
                return d.round.save();
            }).then(function(a) {
                e.resolve(a), c.increment("roundsCreated"), c.set("currentActiveRound", a), c.save();
            }, function(a) {
                var b = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: b
                }), e.reject(a);
            }), e;
        },
        startRound: function() {
            b.MainApp.Main.Controller.showSpinner("Starting round...");
            var a = new Parse.Promise(), c = this;
            return b.MainApp.Main.Controller.showSpinner("Percolating..."), c.getPlayers().then(function() {
                return b.MainApp.Main.Controller.showSpinner("Oiling widgets..."), c.getHoles();
            }).then(function() {
                return b.MainApp.Main.Controller.showSpinner("Scratching itches..."), c.round.set("startDate", new Date()), 
                c.round.save();
            }).then(function(c) {
                console.log("startRound saveRound returned"), setTimeout(function() {
                    b.MainApp.Main.Controller.loadScorecardApp(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "Your new round was successfully created. Share round ID: " + c.id + " with other players for them to join your round.", isError = !1, showAtBottom = !0), 
                    b.MainApp.Main.Controller.hideSpinner(), a.resolve(c), Parse.Analytics.track("startRound");
                }, 100);
            }, function(c) {
                console.log("starting round failed with error: " + JSON.stringify(c)), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Starting your round failed. Please try again.", isError = !0, showAtBottom = !0), 
                b.MainApp.Main.Controller.hideSpinner(), a.reject(c);
                var d = "undefined" != typeof c.code ? "" + c.code : "" + JSON.stringify(c);
                Parse.Analytics.track("error", {
                    code: d
                });
            }), a;
        },
        createNewScorecard: function(a) {
            var b = Parse.User.current() || a, c = this, d = new Parse.Promise();
            Scorecard = Parse.Object.extend("Scorecard"), c.scorecard = new Scorecard(), console.log("Be sure to verify the scorecard creator and the round creator can modify/save the scorecard so it can be set to inactive if round creator deletes round or creates new one."), 
            c.scorecard.set("user", b), c.scorecard.set("round", c.round), c.scorecard.set("isActive", !0);
            var e = new Parse.ACL(Parse.User.current());
            return e.setPublicReadAccess(!0), e.setWriteAccess(b, !0), e.setWriteAccess(c.round.get("user"), !0), 
            c.scorecard.setACL(e), c.scorecard.save().then(function(a) {
                d.resolve(a);
            }, function(a) {
                d.reject(a);
                var b = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: b
                });
            }), d;
        },
        saveRule: function(a) {
            b.MainApp.Main.Controller.showSpinner("Saving...");
            var c = new Parse.Promise(), d = this;
            return a.save().then(function() {
                return "undefined" != typeof d.round.get("rules") ? (d.round.addUnique("rules", a.id), 
                d.round.save()) : void 0;
            }).then(function() {
                return "drink" === a.get("type") ? b.MainApp.Main.Controller.makeRequest("round:rule:drink:entities") : "bonus" === a.get("type") ? b.MainApp.Main.Controller.makeRequest("round:rule:bonus:entities") : b.MainApp.Main.Controller.makeRequest("round:rule:penalty:entities");
            }).then(function(a) {
                return b.Utilities.isUnitTesting === !1 && (d.roundSetupListRulesView.collection = a, 
                d.roundSetupListRulesView.render()), c.resolve(a);
            }, function(a) {
                b.MainApp.Main.Controller.hideSpinner();
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: d
                }), c.reject(a);
            }), c;
        },
        deleteRule: function(a) {
            var c = new Parse.Promise(), d = this, e = a.id, f = a.get("type");
            return this.round.remove("rules", e), this.round.save().then(function() {
                return a.get("isDefault") !== !0 ? a.destroy() : "";
            }).then(function() {
                return "drink" === f ? b.MainApp.Main.Controller.makeRequest("round:rule:drink:entities") : "bonus" === f ? b.MainApp.Main.Controller.makeRequest("round:rule:bonus:entities") : b.MainApp.Main.Controller.makeRequest("round:rule:penalty:entities");
            }).then(function(a) {
                return b.Utilities.isUnitTesting === !1 && (d.roundSetupListRulesView.collection = a, 
                d.roundSetupListRulesView.render()), c.resolve(a);
            }, function(a) {
                b.MainApp.Main.Controller.hideSpinner();
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: d
                }), c.reject(a);
            }), c;
        },
        resetDefaultScoring: function() {
            var a = this, c = new Parse.Promise();
            return this.round.unset("rules"), b.MainApp.Main.Controller.makeRequest("rule:default:entities", defaultsOnly = !0).then(function(b) {
                console.log("RS Controller success count for reset: " + b.length);
                var c = [];
                return b.each(function(a) {
                    "undefined" != typeof a.id && c.push(a.id);
                }), a.round.set("rules", c), a.round.save();
            }).then(function(a) {
                return b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "Custom scoring has been reset to default values.", isError = !1, showAtBottom = !0)), 
                c.resolve(a);
            }, function(a) {
                var d = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: d
                }), b.Utilities.isUnitTesting === !1 && (b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! Something happened", "Resetting defaults failed. Please try again.", isError = !0, showAtBottom = !0)), 
                c.reject(a);
            }), c;
        },
        disableEvents: function() {
            this.roundSetupListHolesView && this.roundSetupListHolesView.undelegateEvents(), 
            this.roundSetupListPlayersView && this.roundSetupListPlayersView.undelegateEvents(), 
            this.roundSetupPlayerDataView && this.roundSetupPlayerDataView.undelegateEvents();
        },
        enableEvents: function() {
            this.roundSetupListHolesView && this.roundSetupListHolesView.delegateEvents(), this.roundSetupListPlayersView && this.roundSetupListPlayersView.delegateEvents(), 
            this.roundSetupPlayerDataView && this.roundSetupPlayerDataView.delegateEvents();
        }
    };
}), BGS.module("RSApp.RoundSetup", function(a, b, c, d, e, f) {
    a.OptionsListView = c.Marionette.ItemView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-options"));
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-options-players": "modifyPlayersClicked",
                "touchend .rs-options-holes": "modifyHolesClicked",
                "touchend .rs-options-auto-course-setup": "automaticCourseSetupClicked",
                "touchend .rs-options-drinks": "customizeDrinksClicked",
                "touchend .rs-options-bonuses": "customizeBonusesClicked",
                "touchend .rs-options-penalties": "customizePenaltiesClicked",
                "touchend .rs-options-reset-defaults": "resetDefaultScoringClicked",
                "touchend .rs-options-delete-round": "deleteRoundClicked",
                "touchend #rs-start-round": "startRoundClicked",
                "touchend #rs-round-id": "roundIdClicked",
                "touchstart .rs-option": "setShouldTakeAction",
                "touchmove .rs-option": "preventTakingAction"
            }) : f.extend(a, {
                "click .rs-options-players": "modifyPlayersClicked",
                "click .rs-options-holes": "modifyHolesClicked",
                "click .rs-options-auto-course-setup": "automaticCourseSetupClicked",
                "click .rs-options-drinks": "customizeDrinksClicked",
                "click .rs-options-bonuses": "customizeBonusesClicked",
                "click .rs-options-penalties": "customizePenaltiesClicked",
                "click .rs-options-reset-defaults": "resetDefaultScoringClicked",
                "click .rs-options-delete-round": "deleteRoundClicked",
                "click #rs-start-round": "startRoundClicked",
                "click #rs-round-id": "roundIdClicked",
                "mousedown .rs-option": "setShouldTakeAction",
                "mousemove .rs-option": "preventTakingAction"
            }), a;
        },
        initialize: function(c) {
            setTimeout(function() {
                e("#rs-start-round").hide(), e("#rs-round-id").hide();
            }, 0);
            var d = c.newRound === !0 ? "Creating Round" : "Modifying Round";
            b.MainApp.Main.Controller.setNavBarTitle(d), e(".right-header-button").hide().unbind(), 
            "undefined" != typeof a.Controller.round && "undefined" != typeof a.Controller.round.get("startDate") && a.Controller.round.get("startDate") > 0 ? this.showRoundIdButton() : this.showStartRoundButton();
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        onBeforeRender: function() {},
        onRender: function() {
            this.createScrollView();
        },
        showStartRoundButton: function() {
            setTimeout(function() {
                e("#rs-start-round").show(), e("#rs-round-id").hide();
            }, 0);
        },
        showRoundIdButton: function() {
            setTimeout(function() {
                e("#rs-start-round").hide(), e("#rs-round-id").show(), e(".rs-options-button-header").html("Join Round ID: " + a.Controller.round.id);
            }, 0);
        },
        setShouldTakeAction: function(a) {
            e(".rs-option").removeClass("ui-highlight-list-row");
            var b = e(a.target).closest("li");
            b.addClass("ui-highlight-list-row"), this.shouldTakeAction = !0, b = null;
        },
        preventTakingAction: function() {
            e(".rs-option").removeClass("ui-highlight-list-row"), this.shouldTakeAction = !1;
        },
        modifyPlayersClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.modifyPlayers(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        modifyHolesClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.modifyHoles(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        automaticCourseSetupClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.automaticCourseSetup(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        customizeDrinksClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.customizeDrinks(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        customizeBonusesClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.customizeBonuses(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        customizePenaltiesClicked: function() {
            var b = this;
            this.shouldTakeAction === !0 && (this.buttonClicked !== !0 && a.Controller.customizePenalties(), 
            this.buttonClicked = !0, setTimeout(function() {
                b.buttonClicked = !1;
            }, 500));
        },
        resetDefaultScoringClicked: function() {
            var c = this;
            this.shouldTakeAction === !0 && confirm({
                header: "Are you sure?",
                message: "Resetting scoring rules will remove any custom ones from the current round. However, any custom scoring added to a hole already will remain for that player. There is no undo.",
                confirmButton: "Yes, reset",
                cancelButton: "No, cancel"
            }, function() {
                setTimeout(function() {
                    b.MainApp.Main.Controller.showSpinner("Resetting...");
                }, 100), c.buttonClicked !== !0 && a.Controller.resetDefaultScoring(), c.buttonClicked = !0, 
                setTimeout(function() {
                    c.buttonClicked = !1;
                }, 500);
            });
        },
        deleteRoundClicked: function() {
            var c = this;
            this.shouldTakeAction === !0 && confirm({
                header: "Are you sure?",
                message: "Deleting this round will remove all data for this round and other players will no longer be able to access it. There is no undo.",
                confirmButton: "Yes, delete",
                cancelButton: "No, cancel"
            }, function() {
                setTimeout(function() {
                    b.MainApp.Main.Controller.showSpinner("Deleting round...");
                }, 100), c.buttonClicked !== !0 && a.Controller.deleteCurrentRound(), c.buttonClicked = !0, 
                setTimeout(function() {
                    c.buttonClicked = !1;
                }, 500);
            });
        },
        startRoundClicked: function() {
            var a = this;
            this.buttonClicked !== !0 && this.startRound(), this.buttonClicked = !0, setTimeout(function() {
                a.buttonClicked = !1;
            }, 500);
        },
        roundIdClicked: function() {
            confirm({
                header: "Unlimited Players in a Round!",
                message: "Enter the Join Round ID listed below into the Join Round section of the sliding menu on the left to play along with this round. We'll take care of setting up the entire course with the same rules you've just created. Other players just need to add their own players (up to 4 per scorecard) for scorekeeping!",
                confirmButton: "OK"
            }, function() {});
        },
        startRound: function() {
            confirm({
                header: "Ready to start?",
                message: "We'll set up default values for anything you didn't set up here already. Return to this section to modify them later.",
                confirmButton: "Start!",
                cancelButton: "Cancel"
            }, function() {
                a.Controller.startRound().then(function() {}, function() {});
            });
        },
        refreshScrollView: function() {
            var a = this;
            setTimeout(function() {
                a.sv.refresh();
            }, 500);
        },
        createScrollView: function(a, c) {
            var d = this;
            setTimeout(function() {
                d.sv = new IScroll("#iscroll-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: 150
                });
                var a = parseInt(e("#container").css("height"), 10), f = parseInt(e(".header").css("height"), 10), g = parseInt(e(".places-bar").css("height"), 10), h = a - (f + g);
                e("#iscroll-wrapper").css("height", h), d.sv.enabled = !0, d.refreshScrollView(), 
                e.isFunction(c) && c(), h = null, b.MainApp.Main.Controller.hideSpinner("round setup view"), 
                e(".rs-list li.rs-option:odd").addClass("lt-lt-gray"), e(".rs-list li.rs-option:even").addClass("no-color");
            }, 100);
        }
    });
}), BGS.module("RSApp.RoundSetup", function(a, b, c, d, e, f) {
    a.Layout = c.Marionette.Layout.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("list-layout"));
        },
        regions: {
            listRegion: "#list-region",
            dataRegion: "#data-region"
        }
    }), a.ListView = c.Marionette.CompositeView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-item-list"));
        },
        itemViewContainer: ".rs-item-list",
        initialize: function() {
            console.log("RoundSetup.ListView initialize");
        },
        remove: function() {
            this.undelegateEvents();
        },
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded",
            remove: "modelRemoved"
        },
        modelChanged: function() {
            console.log("RoundSetup.ListView modelChanged:");
        },
        modelAdded: function() {
            console.log("RoundSetup.ListView modelAdded:"), this.refreshScrollView();
        },
        modelRemoved: function() {
            console.log("RoundSetup.ListView modelRemoved:"), this.render();
        },
        onBeforeRender: function() {},
        onRender: function() {},
        refreshScrollView: function(a) {
            var b = this;
            setTimeout(function() {
                b.sv.refresh(a);
            }, 500);
        },
        createScrollView: function(a, c, d) {
            var f = this;
            setTimeout(function() {
                f.sv = new IScroll("#iscroll-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: c
                });
                var a = parseInt(e("#container").css("height"), 10), g = parseInt(e(".header").css("height"), 10), h = parseInt(e(".places-bar").css("height"), 10), i = a - (g + h);
                e("#iscroll-wrapper").css("height", i), f.sv.enabled = !0, i = null, b.MainApp.Main.Controller.hideSpinner("round setup view"), 
                e.isFunction(d) && d();
            }, 100);
        },
        showHeaderButton: function() {
            e(".right-header-button span").html("Done"), e(".right-header-button").show().on("click", function() {
                b.MainApp.Main.Controller.loadRSApp(shouldCreateNew = !1);
            });
        },
        setTableFooter: function(a) {
            var b = "players" === a ? "Each scorecard can have 1-4 players" : "Not enough nearby bars for 9? Play some twice!";
            e(".table-footer").html(b);
        }
    }), a.ListPlayersView = a.ListView.extend({
        initialize: function() {
            this.options.type = "players", b.MainApp.Main.Controller.setNavBarTitle("Add/Edit Players"), 
            this.buttonClicked = !1, this.showHeaderButton();
            var a = e(".rs-item-list");
            a.html(""), a.css("height", 0);
        },
        remove: function() {
            this.undelegateEvents(), e(".right-header-button").hide().unbind();
        },
        onRender: function() {
            var a = this;
            b.MainApp.Main.Controller.hideSpinner(), setTimeout(function() {
                a.createScrollView(null, 75, function() {
                    a.refreshScrollView(), a.setTableFooter("players");
                });
            }, 0);
        }
    }), a.ListRulesView = a.ListView.extend({
        initialize: function() {
            b.MainApp.Main.Controller.setNavBarTitle("Add/Edit Rules"), this.buttonClicked = !1, 
            this.showHeaderButton();
            var a = e(".rs-item-list");
            a.html(""), a.css("height", 0), a = null;
        },
        remove: function() {
            this.undelegateEvents(), e(".right-header-button").hide().unbind();
        },
        onRender: function() {
            var a = this;
            b.MainApp.Main.Controller.hideSpinner(), setTimeout(function() {
                a.createScrollView(null, null, function() {
                    e(".rs-item-list li:even").addClass("lt-lt-gray"), e(".rs-item-list li:odd").addClass("no-color"), 
                    e(".rs-item-list li:last").removeClass("lt-lt-gray").addClass("lt-drk-gray"), a.refreshScrollView();
                });
            }, 0);
        }
    }), a.ListHolesView = a.ListView.extend({
        initialize: function() {
            this.options.type = "holes", b.MainApp.Main.Controller.setNavBarTitle("Add/Edit Holes"), 
            this.buttonClicked = !1, this.showHeaderButton();
            var a = e(".rs-item-list");
            a.html(""), a.css("height", 0), a = null;
        },
        remove: function() {
            this.undelegateEvents(), e(".right-header-button").hide().unbind();
        },
        onRender: function() {
            var a = this;
            b.MainApp.Main.Controller.hideSpinner(), this.createScrollView(null, function() {
                a.setTableFooter("holes"), a.refreshScrollView();
            });
        }
    }), a.PlayerDataView = c.Marionette.ItemView.extend({
        className: "round-setup-player-data",
        template: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-player-data"));
        },
        initialize: function() {
            this.dataViewIsShowing = !1;
        },
        events: function() {
            var a = {
                "keypress input[type=text]": "saveOnEnter",
                "keypress input[type=number]": "saveOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-save-button": "savePlayerClicked",
                "touchend .rs-delete-button": "deletePlayerClicked",
                "touchend .rs-cancel-button": "hideDataView",
                "touchend .handicap-link": "handicapExplanationClicked"
            }) : f.extend(a, {
                "click .rs-save-button": "savePlayerClicked",
                "click .rs-delete-button": "deletePlayerClicked",
                "click .rs-cancel-button": "hideDataView",
                "click .handicap-link": "handicapExplanationClicked"
            }), a;
        },
        onRender: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        createDataScrollView: function(a, b, c) {
            var d = this;
            setTimeout(function() {
                d.dataScrollView = new IScroll("#iscroll-data-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: b
                }), d.dataScrollView.enabled = !0, e.isFunction(c) && c();
            }, 100);
        },
        showDataView: function(a, b) {
            this.delegateEvents(), e(".rs-options-header").addClass("transparent").removeClass("selected-item");
            var c = e(a.target).closest("li");
            c.removeClass("transparent").addClass("selected-item");
            var d = this, f = e("#player-edit-heading"), g = e("#data-region"), h = e("#player-displayname"), i = e("#player-handicap"), j = "", k = "";
            this.model = b, f.html("Edit Player " + this.model.get("playerNum")), j = "Touch to Add New Player" != this.model.get("displayName") ? this.model.get("displayName") : "", 
            h.val(j), k = this.model.get("handicap"), "Touch to Add New Player" != this.model.get("displayName") ? i.val(k) : i.val(""), 
            g.slideDown(200);
            var l = e(".rs-delete-button");
            "Touch to Add New Player" != this.model.get("displayName") ? l.show() : l.hide(), 
            setTimeout(function() {
                d.createDataScrollView(null, 0, function() {
                    var a = parseInt(e("#data-region").css("height"), 10), b = parseInt(e(".form-data-table-header").css("height"), 10), f = parseInt(e(".form-data-table-footer").css("height"), 10), g = a - (b + f + 2);
                    e("#iscroll-data-wrapper").css("height", g), e(".form-data-row").css("height", g), 
                    d.dataViewIsShowing === !1 && e("#iscroll-data").height() > e("#iscroll-data-wrapper").height() + 10 && (setTimeout(function() {
                        d.dataScrollView.scrollTo(0, -35, 100);
                    }, 0), setTimeout(function() {
                        d.dataScrollView.scrollTo(0, 0, 300);
                    }, 100), d.dataViewIsShowing = !0), g = null, c = null;
                });
            }, 100);
        },
        hideDataView: function() {
            var b = (e(".round-setup-player-data"), e("#data-region"));
            b.slideUp(200), a.Controller.roundSetupListPlayersView.sv.scrollTo(0, 0, 400), e(".rs-options-header").removeClass("transparent").removeClass("selected-item"), 
            e(".topcoat-text-input").removeClass("e success"), this.dataViewIsShowing = !1, 
            b = null;
        },
        handicapExplanationClicked: function() {
            b.MainApp.Main.Controller.showHelpView("handicap");
        },
        deletePlayerClicked: function() {
            var c = this;
            this.model.get("isUserAccount") === !0 ? confirm({
                header: "Player cannot be deleted",
                message: "This player is associated with your Bar Golf Stars user account and cannot be deleted. If you wish to delete your BGS account, please access this feature from the sliding menu on the left.",
                confirmButton: "OK"
            }) : "Touch to Add New Player" === this.model.get("displayName") || confirm({
                header: "Are you sure?",
                message: "Deleting this player will remove him/her from the current round and all of this player's statistics for the round will be erased. There is no undo.",
                confirmButton: "Yes, delete",
                cancelButton: "No, cancel"
            }, function() {
                a.Controller.deletePlayer(c.model).then(function() {
                    b.MainApp.Main.Controller.hideSpinner(), a.Controller.roundSetupListPlayersView.setTableFooter("players"), 
                    c.hideDataView();
                }, function(a) {
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Deleting Player", JSON.stringify(a) + " Please try again.", isError = !0, showAtBottom = !0);
                });
            });
        },
        saveOnEnter: function(a) {
            13 == a.keyCode && this.savePlayerClicked(a);
        },
        savePlayerClicked: function() {
            if (e("input:focus").blur(), this.validateForm()) {
                this.model.set("user", Parse.User.current()), this.model.set("playerNum", this.model.collection.indexOf(this.model) + 1), 
                this.model.set("round", a.Controller.round), this.model.set("scorecard", a.Controller.scorecard), 
                this.model.set("displayName", e("#player-displayname").val());
                var c = e("#player-handicap"), d = c.val().trim();
                "" === d ? this.model.set("handicap", 0) : this.model.set("handicap", parseInt(d, 10));
                var f = this;
                a.Controller.savePlayer(this.model).then(function() {
                    a.Controller.roundSetupListPlayersView.setTableFooter("players"), f.hideDataView();
                }, function(a) {
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Saving Player", JSON.stringify(a) + " Please try again.", isError = !0, showAtBottom = !0);
                });
            }
        },
        validateForm: function() {
            var a = !0;
            return e("#player-displayname").val().length < 3 || e("#player-displayname").val().length > 20 || e("#player-displayname").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a display name 3-20 characters long with no special characters. This will be displayed to other players.", isError = !0, showAtBottom = !0), 
            a = !1) : e("#player-handicap").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Handicaps must only be positive/negative numbers or 0 (no handicap). Negative numbers assist weaker players while higher positive numbers make it tougher for those stronger players.", isError = !0, showAtBottom = !0), 
            a = !1) : a;
        }
    }), a.RuleDataView = c.Marionette.ItemView.extend({
        className: "round-setup-rule-data",
        template: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-rule-data"));
        },
        initialize: function() {
            this.dataViewIsShowing = !1;
        },
        events: function() {
            var a = {
                "keypress input[type=text]": "saveOnEnter",
                "keypress textarea": "saveOnEnter",
                "keypress input[type=number]": "saveOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-save-button": "saveRuleClicked",
                "touchend .rs-delete-button": "deleteRuleClicked",
                "touchend .rs-cancel-button": "hideDataView",
                "touchend .value-link": "valueExplanationClicked"
            }) : f.extend(a, {
                "click .rs-save-button": "saveRuleClicked",
                "click .rs-delete-button": "deleteRuleClicked",
                "click .rs-cancel-button": "hideDataView",
                "click .value-link": "valueExplanationClicked"
            }), a;
        },
        onRender: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        createDataScrollView: function(a, b, c) {
            var d = this;
            setTimeout(function() {
                d.dataScrollView = new IScroll("#iscroll-data-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: b
                }), d.dataScrollView.enabled = !0, e.isFunction(c) && c();
            }, 100);
        },
        showDataView: function(b, c) {
            this.delegateEvents(), e(".rs-options-header").addClass("transparent").removeClass("selected-item");
            var d = e(b.target).closest("li");
            d.removeClass("transparent").addClass("selected-item");
            var f = this, g = e("#rule-edit-heading"), h = e("#name-title"), i = e("#value-title"), j = e("#description-title"), k = e("#data-region"), l = e("#rule-name"), m = e("#rule-description"), n = e("#rule-value"), o = "", p = "", q = "";
            this.model = c;
            var r = e(".rs-delete-button");
            p = this.model.get("description"), q = this.model.get("value"), "Touch to Add New Drink" != this.model.get("name") && "Touch to Add New Bonus" != this.model.get("name") && "Touch to Add New Penalty" != this.model.get("name") ? (o = this.model.get("name"), 
            m.val(p), n.val(q), r.show()) : (o = "", m.val(""), n.val(""), r.hide()), "drink" === this.model.get("type") ? (g.html("Edit Drink Rule"), 
            h.html("Drink Name*"), i.html("Drink Stroke Value*"), j.html("Drink Description")) : "bonus" === this.model.get("type") ? (g.html("Edit Bonus Rule"), 
            h.html("Bonus Name*"), i.html("Bonus Stroke Value*"), j.html("Bonus Description")) : (g.html("Edit Penalty Rule"), 
            h.html("Penalty Name*"), i.html("Penalty Stroke Value*"), j.html("Penalty Description")), 
            l.val(o);
            var s = e(".rs-list").height();
            a.Controller.roundSetupListRulesView.sv.maxScrollY = -s, k.slideDown(200), setTimeout(function() {
                f.createDataScrollView(null, 0, function() {
                    var a = parseInt(e("#data-region").css("height"), 10), b = parseInt(e(".form-data-table-header").css("height"), 10), c = parseInt(e(".form-data-table-footer").css("height"), 10), d = a - (b + c + 2);
                    e("#iscroll-data-wrapper").css("height", d), e(".form-data-row").css("height", d), 
                    f.dataViewIsShowing === !1 && e("#iscroll-data").height() > e("#iscroll-data-wrapper").height() + 10 && (setTimeout(function() {
                        f.dataScrollView.scrollTo(0, -35, 100);
                    }, 0), setTimeout(function() {
                        f.dataScrollView.scrollTo(0, 0, 300);
                    }, 100), f.dataViewIsShowing = !0), d = null, s = null;
                });
            }, 100);
        },
        hideDataView: function() {
            var b = (e(".round-setup-rule-data"), e("#data-region"));
            b.slideUp(200), a.Controller.roundSetupListRulesView.sv.scrollTo(0, 0, 400), a.Controller.roundSetupListRulesView.refreshScrollView(), 
            e(".rs-options-header").removeClass("transparent").removeClass("selected-item"), 
            e(".topcoat-text-input").removeClass("e success"), this.dataViewIsShowing = !1, 
            b = null;
        },
        valueExplanationClicked: function() {
            b.MainApp.Main.Controller.showHelpView("rule-value");
        },
        deleteRuleClicked: function() {
            var c = this;
            "Touch to Add New Drink" === this.model.get("name") || "Touch to Add New Bonus" === this.model.get("name") || "Touch to Add New Penalty" === this.model.get("name") || confirm({
                header: "Are you sure?",
                message: "Deleting this rule will remove it from the current round and no one can use it again. However, any scoring added with this rule already will remain. There is no undo.",
                confirmButton: "Yes, delete",
                cancelButton: "No, cancel"
            }, function() {
                b.MainApp.Main.Controller.showSpinner("Deleting..."), a.Controller.deleteRule(c.model).then(function() {
                    b.MainApp.Main.Controller.hideSpinner(""), c.hideDataView();
                }, function(a) {
                    b.MainApp.Main.Controller.hideSpinner(""), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Deleting Rule", JSON.stringify(a) + " Please try again.", isError = !0, showAtBottom = !0);
                });
            });
        },
        saveOnEnter: function(a) {
            13 == a.keyCode && this.saveRuleClicked(a);
        },
        saveRuleClicked: function() {
            if (e("input:focus").blur(), e("textarea:focus").blur(), this.validateForm()) {
                var a = this, c = this.model.get("isDefault") === !0 ? this.saveDefaultRule : this.saveNonDefaultRule;
                c(this.model).then(function() {
                    a.hideDataView();
                }, function(a) {
                    b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Saving Rule", JSON.stringify(a) + " Please try again.", isError = !0, showAtBottom = !0);
                });
            }
        },
        saveDefaultRule: function(c) {
            var d = new b.Entities.Rule(), f = new Parse.Promise();
            if (c.get("isDefault") === !0 && d.set("modifiedDefault", c), d.set("isDefault", !1), 
            d.set("type", c.get("type")), d.set("user", Parse.User.current()), d.set("round", a.Controller.round), 
            d.set("name", e("#rule-name").val()), d.set("description", e("#rule-description").val()), 
            b.Utilities.isUnitTesting === !1) {
                var g = e("#rule-value"), h = g.val().trim();
                "" === h ? d.set("value", 0) : d.set("value", Number(h));
            }
            return a.Controller.saveRule(d).then(function() {
                return a.Controller.deleteRule(c);
            }).then(function(a) {
                f.resolve(a);
            }, function(a) {
                f.reject(a);
            }), f;
        },
        saveNonDefaultRule: function(b) {
            var c = new Parse.Promise();
            b.set("isDefault", !1), b.set("user", Parse.User.current()), b.set("round", a.Controller.round), 
            b.set("name", e("#rule-name").val()), b.set("description", e("#rule-description").val());
            var d = e("#rule-value"), f = d.val().trim();
            return "" === f ? b.set("value", 0) : b.set("value", Number(f)), a.Controller.saveRule(b).then(function(a) {
                c.resolve(a);
            }, function(a) {
                c.reject(a);
            }), d = null, c;
        },
        validateForm: function() {
            var a = !0, c = e("#rule-name"), d = e("#rule-description"), f = e("#rule-value");
            if (c.val().length < 3 || c.val().length > 60 || c.closest("input").hasClass("e")) return b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops!", "Please enter a rule title 3-60 characters long with no special characters.", isError = !0, showAtBottom = !0), 
            a = !1;
            if (d.val().length > 200 || d.closest("input").hasClass("e")) return b.MainApp.Main.Controller.showNotificationWithDismissDelay("Description too long", "Descriptions can be up to 200 characters.", isError = !0, showAtBottom = !0), 
            a = !1;
            var g = f.val().trim(), h = parseInt(g, 10), i = h % .5, j = !1;
            return 0 === i ? "" : j = !0, "" === f.val() || j === !0 || f.closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Stroke value required", "Stroke values for rules can only be whole/half positive/negative numbers (e.g. 1.5, -2). Negative numbers are for drinks and bonuses while positive numbers should be added for penalties.", isError = !0, showAtBottom = !0), 
            a = !1) : (f = null, a);
        }
    });
}), BGS.module("RSApp.RoundSetup", function(a, b, c, d, e, f) {
    a.ItemView = c.Marionette.CompositeView.extend({
        setShouldTakeAction: function() {
            this.shouldTakeAction = !0;
        },
        preventTakingAction: function() {
            this.shouldTakeAction = !1;
        },
        initialize: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            this.render();
        },
        modelAdded: function() {},
        onBeforeRender: function() {},
        onRender: function() {}
    }), a.PlayerItemView = a.ItemView.extend({
        model: b.Entities.Player,
        initialize: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-options-header": "showPlayerDetails",
                "touchstart .rs-options-header": "setShouldTakeAction",
                "touchmove .rs-options-header": "preventTakingAction"
            }) : f.extend(a, {
                "click .rs-options-header": "showPlayerDetails",
                "mousedown .rs-options-header": "setShouldTakeAction",
                "mousemove .rs-options-header": "preventTakingAction"
            }), a;
        },
        showPlayerDetails: function(b) {
            this.shouldTakeAction === !0 && (a.Controller.roundSetupPlayerDataView.showDataView(b, this.model), 
            a.Controller.roundSetupListPlayersView.sv.scrollToElement(b.currentTarget));
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-item-list-player"));
        }
    }), a.RuleItemView = a.ItemView.extend({
        model: b.Entities.Rule,
        initialize: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-options-header": "showRuleDetails",
                "touchstart .rs-options-header": "setShouldTakeAction",
                "touchmove .rs-options-header": "preventTakingAction"
            }) : f.extend(a, {
                "click .rs-options-header": "showRuleDetails",
                "mousedown .rs-options-header": "setShouldTakeAction",
                "mousemove .rs-options-header": "preventTakingAction"
            }), a;
        },
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {},
        modelAdded: function() {
            console.log("RoundSetup.RuleItemView modelAdded");
        },
        showRuleDetails: function(b) {
            this.shouldTakeAction === !0 && (a.Controller.roundSetupRuleDataView.showDataView(b, this.model), 
            a.Controller.roundSetupListRulesView.sv.scrollToElement(b.currentTarget));
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-item-list-rule"));
        }
    }), a.HoleItemView = a.ItemView.extend({
        model: b.Entities.Hole,
        initialize: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .rs-options-header": "goToBarListClicked",
                "touchstart .rs-options-header": "setShouldTakeAction",
                "touchmove .rs-options-header": "preventTakingAction"
            }) : f.extend(a, {
                "click .rs-options-header": "goToBarListClicked",
                "mousedown .rs-options-header": "setShouldTakeAction",
                "mousemove .rs-options-header": "preventTakingAction"
            }), a;
        },
        goToBarListClicked: function() {
            this.shouldTakeAction === !0 && a.Controller.modifySingleHole(this.model);
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("round-setup-item-list-hole"));
        }
    });
}), BGS.module("ScorecardApp.Scorecard", function(a, b, c, d, e, f) {
    a.Controller = {
        initialize: function(a) {
            var c = {}, d = this;
            a.scorecardIsActive === !0 ? b.MainApp.Main.Controller.makeRequest("scorecard:player:entities").then(function(a) {
                return c.players = a, b.MainApp.Main.Controller.makeRequest("scorecard:hole:entities");
            }).then(function(a) {
                return c.holes = d.holes = a, b.MainApp.Main.Controller.makeRequest("scorecard:score:entities");
            }).then(function(a) {
                c.scores = d.scores = a, d.showScorecard(c);
            }, function(a) {
                var c = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                Parse.Analytics.track("error", {
                    code: c
                }), console.log("e: " + JSON.stringify(a)), b.MainApp.Main.Controller.hideSpinner(), 
                b.MainApp.Main.Controller.showNotificationWithDismissDelay("Oops! There was an error:", a, isError = !0, showAtBottom = !0);
            }) : (console.log("Scorecard Controller init: user does not have an active scorecard; we should show a warning message"), 
            d.showNoScorecardMessage(c));
        },
        showNoScorecardMessage: function(c) {
            console.log("showNoScorecardMessage options: " + JSON.stringify(c));
            var d = this;
            d.options = c, "undefined" != typeof d.listLayout && d.listLayout.close(), d.listLayout = new a.Layout(), 
            d.listLayout.on("show", function() {
                setTimeout(function() {
                    e("#player-region").hide(), e("#hole-region").hide(), e("#data-region").hide(), 
                    e(".request-error").remove(), e("#error-region").show().height("100%!important");
                    var a = "";
                    a = "<div class='request-error'><br><br><br>Almost ready! <br><br>You don't have any active rounds yet! <br>To start playing Bar Golf Stars, you first need to <span id='join-round'><u>join someone else's round</u></span> or <span id='create-round'><u>create a new round</u></span> of your own.</div>", 
                    e("#error-region").append(a), e("#join-round").on("click", function() {
                        console.log("ScorecardController showNoScorecardMessage: join round clicked");
                    }), e("#create-round").on("click", function() {
                        console.log("create round clicked"), b.MainApp.Main.Controller.leftPanelView.goToCreateRound();
                    }), e(".right-header-button").hide().unbind(), b.MainApp.Main.Controller.hideSpinner();
                }, 0);
            }), d.showView(d.listLayout, d.noEffect());
        },
        showView: function(a, c, d) {
            b.containerRegion.show(a), e.isFunction(d) && d();
        },
        showScorecard: function(c) {
            var d = this;
            d.options = c, "undefined" != typeof d.listLayout && d.listLayout.close(), d.listLayout = new a.Layout(), 
            d.listLayout.on("show", function() {
                setTimeout(function() {
                    d.scorecardPlayerList = d.scorecardPlayerListView({
                        collection: d.options.players,
                        itemView: a.PlayerRowView
                    }), d.scorecardHoleNameList = d.scorecardHoleNameListView({
                        collection: d.options.holes,
                        itemView: a.HoleNameRowView
                    }), d.scorecardHoleScoreList = d.scorecardHoleScoreListView({
                        collection: d.options.players,
                        scores: d.options.scores,
                        itemView: a.HoleScoreRowView
                    }), d.enterScoreDataView = d.scorecardEnterDataView(d.options), d.listLayout.playerRegion.show(d.scorecardPlayerList), 
                    d.listLayout.holeNameRegion.show(d.scorecardHoleNameList), d.listLayout.holeScoreRegion.show(d.scorecardHoleScoreList), 
                    d.listLayout.dataRegion.show(d.enterScoreDataView), e("#data-region").css("height", "80%"), 
                    e("#breakdown-region").css("height", "80%"), d.listLayout.createScrollView(), document.addEventListener("touchmove", function(a) {
                        a.preventDefault();
                    }, !1), b.MainApp.Main.Controller.hideSpinner(""), b.MainApp.Main.Controller.slidingPanel.sidebar.on("panelOpen", function() {
                        d.enterScoreDataView.hideDataView();
                    });
                }, 0);
            }), d.showView(d.listLayout, d.noEffect());
        },
        showEnterScoreDataView: function(a, b, c) {
            console.log("holenum id: " + c), this.enterScoreDataView.showDataView(a, b, c);
        },
        showScoringBreakdown: function(a, c, d) {
            console.log("Scorecard.Controller showScoringBreakdown:");
            var e = this, f = {};
            f.player = a, f.hole = c, f.currentScore = d, e.enterScoreDataView.hideDataView(function() {
                b.MainApp.Main.Controller.slidingPanel.sidebar.on("panelOpen", function() {
                    e.scoringBreakdownView.hideScoringBreakdown();
                }), e.getAllScoresForPlayerForHole(a, c).then(function(a) {
                    f.scores = a, e.scoringBreakdownView = e.scorecardScoringBreakdownView(f), e.listLayout.breakdownRegion.show(e.scoringBreakdownView);
                }, function(a) {
                    console.log("e getting scores: " + JSON.stringify(a));
                });
            });
        },
        getMaxHolePlayedForPlayer: function(a) {
            var b = this, c = b.scores.getScoresForPlayer(a.id);
            maxNum = f.max(c, function(a) {
                var c = a.get("hole").id, d = b.holes.get(c).get("holeNum");
                return d;
            });
            var d = maxNum.get("hole").id;
            return b.holes.get(d).get("holeNum");
        },
        getRulesForScoring: function(a) {
            var c = "", d = new Parse.Promise();
            return c = "drink" === a ? "scorecard:rule:drink:entities" : "bonus" === a ? "scorecard:rule:bonus:entities" : "scorecard:rule:penalty:entities", 
            b.MainApp.Main.Controller.makeRequest(c).then(function(a) {
                return d.resolve(a);
            }, function(a) {
                var b = "undefined" != typeof a.code ? "" + a.code : "" + JSON.stringify(a);
                return Parse.Analytics.track("error", {
                    code: b
                }), console.log("e: " + JSON.stringify(a)), d.reject(a);
            }), d;
        },
        getAllScoresForPlayerForHole: function(a, c) {
            console.log("ScorecardController getAllScoresForPlayerForHole:");
            var d = new Parse.Promise(), e = a.id, f = c.id, g = {
                playerId: e,
                holeId: f
            };
            return b.MainApp.Main.Controller.makeRequest("scorecard:player:scores", g).then(function(a) {
                d.resolve(a);
            }, function(a) {
                console.log("error retrieving scores for player and hole"), d.reject(a);
            }), d;
        },
        saveScore: function(a) {
            var c = new Parse.Promise(), d = Parse.Object.extend("Score"), e = new d(), f = this;
            e.set("hole", a.hole), e.set("player", a.player), e.set("rule", a.rule), e.set("count", a.count), 
            e.set("user", Parse.User.current()), e.set("round", b.RSApp.RoundSetup.Controller.round), 
            e.set("scorecard", b.RSApp.RoundSetup.Controller.scorecard), e.set("timeAtScore", new Date());
            var g = new Parse.ACL(Parse.User.current());
            return g.setPublicReadAccess(!0), e.setACL(g), e.save().then(function(b) {
                var c = a.player.relation("scores"), d = a.player.get("totalRoundStrokes"), e = 0;
                return c.add(b), e = d + a.rule.get("value") * a.count, a.player.set("totalRoundStrokes", e), 
                a.player.addUnique("holesPlayed", a.hole), a.player.set("maxHolePlayed", f.calcMaxHolePlayed(a.player)), 
                a.player.set("parsInPlayTotal", f.calcParsInPlayTotal(a.player)), a.player.save();
            }).then(function(a) {
                c.resolve(e, a);
            }, function(a) {
                console.log("error saving player relation: " + JSON.stringify(a)), c.reject(a);
            }), c;
        },
        calcParsInPlayTotal: function(a) {
            var b = 0, c = a.get("holesPlayed"), d = this;
            return f.each(c, function(a) {
                var c = d.holes.get(a.id).get("par");
                b += c;
            }), b;
        },
        calcMaxHolePlayed: function(a) {
            var b = a.get("holesPlayed"), c = this, d = f.max(b, function(a) {
                return c.holes.get(a.id).get("holeNum");
            });
            return c.holes.get(d.id).get("holeNum");
        },
        getHoleModel: function(a) {
            var c = new Parse.Promise(), d = this, e = d.holes.getHole(a), g = new b.Entities.Hole();
            return f.extend(g, e[0]), g instanceof b.Entities.Hole && "undefined" != typeof g.get("holeNum") ? c.resolve(g) : c.reject("nope"), 
            c;
        },
        getRuleModelbyId: function(a) {
            var c = e.Deferred(), d = c.promise();
            return b.request("rule:id", a).then(function(a) {
                c.resolve(a);
            }, function(a) {
                console.log("e: " + JSON.stringify(a)), c.reject(a);
            }), d;
        },
        scorecardPlayerListView: function(b) {
            return new a.PlayerList(b);
        },
        scorecardHoleNameListView: function(b) {
            return new a.HoleNameList(b);
        },
        scorecardHoleScoreListView: function(b) {
            return new a.HoleScoreList(b);
        },
        scorecardEnterDataView: function(b) {
            return new a.ScorecardEnterDataView(b);
        },
        scorecardScoringBreakdownView: function(b) {
            return new a.ScorecardScoringBreakdownView(b);
        },
        noEffect: function() {
            return new BackStack.NoEffect();
        },
        disableEvents: function() {
            this.placesMapView && this.placesMapView.undelegateEvents();
        },
        enableEvents: function() {
            this.placesMapView && this.placesMapView.delegateEvents();
        }
    };
}), BGS.module("ScorecardApp.Scorecard", function(a, b, c, d, e, f) {
    a.Layout = c.Marionette.Layout.extend({
        className: "scorecard-region",
        template: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-layout"));
        },
        regions: {
            playerRegion: "#player-region",
            holeNameRegion: "#hole-name-region",
            holeScoreRegion: "#hole-score-region",
            dataRegion: "#data-region",
            breakdownRegion: "#breakdown-region",
            errorRegion: "#error-region"
        },
        remove: function() {
            console.log("scorecard layout remove"), this.undelegateEvents(), this.unbind();
        },
        createScrollView: function() {
            var a = this;
            setTimeout(function() {
                a.sv = new IScroll("#iscroll-scorecard-wrapper", {
                    scrollX: !0,
                    scrollY: !1
                }), a.sv.enabled = !0, b.MainApp.Main.Controller.setNavBarTitle("My Scorecard"), 
                e("#iscroll-scorecard-wrapper").on("touchstart", function() {
                    b.MainApp.Main.Controller.slidingPanel.enabled = !1;
                }), e("#iscroll-scorecard-wrapper").on("touchend", function() {
                    b.MainApp.Main.Controller.slidingPanel.enabled = !0;
                }), e("#iscroll-scorecard-wrapper").on("mousedown", function() {
                    b.MainApp.Main.Controller.slidingPanel.enabled = !1;
                }), e("#iscroll-scorecard-wrapper").on("mouseup", function() {
                    b.MainApp.Main.Controller.slidingPanel.enabled = !0;
                }), e(".scorecard-hole-name-list td:even").css("background-color", "rgb(198, 205, 205)"), 
                e(".scorecard-hole-score-list td:odd").css("background-color", "rgba(57, 62, 64, 0.05)");
            }, 100);
        }
    }), a.PlayerList = c.Marionette.CompositeView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-player-list"));
        },
        itemViewContainer: ".scorecard-player-list",
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            console.log("Scorecard.PlayerList modelChanged");
        },
        modelAdded: function() {
            console.log("Scorecard.PlayerList modelAdded");
        },
        initialize: function() {
            var a = e("scorecard-player-list");
            a.html(""), a.css("height", 0), a = null;
        },
        onRender: function() {
            setTimeout(function() {
                e(".scorecard-player-list li:even table").addClass("even-gray");
            }, 0);
        },
        remove: function() {
            console.log("player list remove"), this.undelegateEvents(), this.unbind();
        }
    }), a.HoleNameList = c.Marionette.CompositeView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-hole-name-list"));
        },
        itemViewContainer: ".scorecard-hole-name-list",
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            console.log("Scorecard.HoleNameList modelChanged");
        },
        modelAdded: function() {
            console.log("Scorecard.HoleNameList modelAdded");
        },
        initialize: function() {},
        remove: function() {
            this.undelegateEvents(), this.unbind();
        }
    }), a.HoleScoreList = c.Marionette.CompositeView.extend({
        template: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-hole-score-list"));
        },
        itemViewContainer: ".scorecard-hole-score-list",
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            console.log("Scorecard.HoleScoreList modelChanged");
        },
        modelAdded: function() {
            console.log("Scorecard.HoleScoreList modelAdded");
        },
        initialize: function(a) {
            this.scores = a.scores;
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        onRender: function() {
            this.getScoresForAllPlayers();
        },
        getScoresForAllPlayers: function() {
            var b = this;
            this.collection.each(function(c) {
                var d = b.scores.getScoresForPlayer(c.id);
                if (d.length > 0) for (b.allScoresForPlayer = 0, i = 1; 10 > i; i++) a.Controller.getHoleModel(i).then(function(a) {
                    b.getPlayerTotalScoreForHole(a, c);
                });
            });
        },
        getStrokeValueForRule: function(a) {
            var c = e.Deferred(), d = c.promise();
            return b.request("rule:id", a).then(function(a) {
                c.resolve(a.get("value"));
            }, function(a) {
                console.log("e: " + JSON.stringify(a)), c.reject(a);
            }), d;
        },
        getPlayerTotalScoreForHole: function(a, b) {
            var c = this;
            if (c.scores.getScoresForPlayer(b.id).length > 0) {
                var d = c.scores.getScoresForHole(a.id, c.scores.getScoresForPlayer(b.id));
                d.length > 0 ? c.updateUIForHoleScores(a, b, d) : "";
            }
        },
        updateTotalScoreForPlayer: function(a) {
            var b = a.get("playerNum"), c = ".p-row-" + b, d = a.get("totalRoundStrokes") - a.get("handicap") + a.get("parsInPlayTotal");
            s = this, s.formatScoreEntry(d, c);
        },
        updateUIForHoleScores: function(a, b, c) {
            var d = a.get("par"), g = a.get("holeNum"), h = ".scorecard-hole-par #hole-" + g, i = this, j = c, k = 0;
            e(h).html("Par " + d + "/Handicap " + 10 - Number(d));
            var l = b.get("playerNum"), m = "tr#p" + l + ' [data-id="' + g + '"]', n = 0 + Number(d);
            f.each(j, function(c) {
                k++, i.getStrokeValueForRule(c.get("rule").id).then(function(d) {
                    var e = d * c.get("count");
                    n += e, k === j.length && (i.formatScoreEntry(n, m), a.get("holeNum") === b.get("maxHolePlayed") && i.updateTotalScoreForPlayer(b));
                });
            });
        },
        formatScoreEntry: function(a, b) {
            var c = e(b);
            c.removeClass("red-font"), 0 > a ? c.html(a) : 0 === a || "E" == a ? c.html("E") : a > 0 ? c.html("+" + a).addClass("red-font") : c.html("--"), 
            c = null;
        }
    }), a.ScorecardDataViewParent = c.Marionette.ItemView.extend({
        className: "scorecard-enter-score-data",
        selectItem: function(a) {
            var b = e(a.target);
            b.css({
                "-webkit-transform": "scale3d(0.9, 0.9, 1)"
            }), b.addClass("score-choice-button-active"), setTimeout(function() {
                b.css({
                    "-webkit-transform": "scale3d(1.0, 1.0, 1)"
                }), b.removeClass("score-choice-button-active"), b = null;
            }, 500);
        },
        hideSelf: function(a, b) {
            var c = e(b), d = this;
            d.disableAddScoreBtn(), e("#player-region").css("opacity", "1.0"), e("#iscroll-scorecard-wrapper").css("opacity", "1.0"), 
            c.slideUp(200, function() {
                e.isFunction(a) && a(), d.dataViewIsShowing = !1;
            }), c = null;
        },
        validateForm: function() {
            var a = !0;
            return e("#score-count").closest("input").hasClass("e") ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Quantity not entered", "Looks like you forgot to put in how many scoring items you want to add under 'How Many?' This should be a positive whole number.", isError = !0, showAtBottom = !0), 
            a = !1) : Number(e("#score-count").val()) <= 0 ? (b.MainApp.Main.Controller.showNotificationWithDismissDelay("Scoring item quantity error", "When you enter how many scoring items you wish to add, please enter a positive whole number. If you wish to delete a scoring item, go to Scoring Breakdown.", isError = !0, showAtBottom = !0), 
            a = !1) : "undefined" != typeof this.rule && this.rule ? a : (b.MainApp.Main.Controller.showNotificationWithDismissDelay("No scoring item selected", "Please select a scoring item from the list above and enter how many you wish to add for it.", isError = !0, showAtBottom = !0), 
            a = !1);
        }
    }), a.ScorecardEnterDataView = a.ScorecardDataViewParent.extend({
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-enter-score-data"));
        },
        initialize: function() {
            this.dataViewIsShowing = !1;
            var b = this;
            a.Controller.getRulesForScoring("drink").then(function(a) {
                b.collection = a, e(".subheader-name").html("Drink Name");
            });
        },
        events: function() {
            var a = {
                "keypress input[type=number]": "saveOnEnter"
            };
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .score-save-button": "saveScoreClicked",
                "touchend .score-cancel-button": "hideDataView",
                "touchend .score-drink-button": "showDrinksClicked",
                "touchend .score-bonus-button": "showBonusesClicked",
                "touchend .score-penalty-button": "showPenaltiesClicked",
                "touchend #sc-scoring-breakdown": "scoringBreakdownClicked",
                "touchstart #sc-scoring-breakdown": "selectItem",
                "touchstart .score-choice-button": "highlightItem"
            }) : f.extend(a, {
                "click .score-save-button": "saveScoreClicked",
                "click .score-cancel-button": "hideDataView",
                "click .value-link": "valueExplanationClicked",
                "click .score-drink-button": "showDrinksClicked",
                "click .score-bonus-button": "showBonusesClicked",
                "click .score-penalty-button": "showPenaltiesClicked",
                "click #sc-scoring-breakdown": "scoringBreakdownClicked",
                "mousedown #sc-scoring-breakdown": "selectItem",
                "mousedown .score-choice-button": "highlightItem"
            }), a;
        },
        saveOnEnter: function(a) {
            13 == a.keyCode && (a.preventDefault(), this.saveScoreClicked(a));
        },
        saveScoreClicked: function() {
            e("input:focus").blur();
            var c = this, d = {};
            if (c.validateForm()) {
                d.player = c.player, d.hole = c.hole, d.rule = c.rule, d.count = Number(e("#score-count").val());
                var f = d.count * d.rule.get("value"), g = "This will add " + f + " strokes to this player's score.";
                confirm({
                    header: "Are you sure?",
                    message: g,
                    confirmButton: "Yes",
                    cancelButton: "Cancel"
                }, function() {
                    b.MainApp.Main.Controller.showSpinner(), a.Controller.saveScore(d).then(function(a, e) {
                        d.player = e, c.addScoreToTotal(a), c.resetDataView(), b.MainApp.Main.Controller.hideSpinner(), 
                        b.MainApp.Main.Controller.showNotificationWithDismissDelay("Success!", "This score was successfully added. Touch the Done button when finished adding scores for this player.", isError = !1, showAtBottom = !0);
                    }, function(a) {
                        b.MainApp.Main.Controller.hideSpinner(), b.MainApp.Main.Controller.showNotificationWithDismissDelay("Error Saving Score", JSON.stringify(a) + " Please try again.", isError = !0, showAtBottom = !0);
                    });
                });
            }
        },
        addScoreToTotal: function(b) {
            var c = this, d = b.get("count"), f = b.get("player").id;
            ruleId = b.get("rule").id, sId = c.player.id, par = c.hole.get("par"), $scoreBox = e("#scorecard-total-score"), 
            scoreSel = "tr#p" + c.player.get("playerNum") + ' [data-id="' + c.hole.get("holeNum") + '"]', 
            sId == f && a.Controller.getRuleModelbyId(ruleId).then(function(b) {
                var e = b.get("value"), f = Number(e * d), g = 0;
                setTimeout(function() {
                    $scoreBox.stop().animate({
                        fontSize: "46px"
                    }, 100, null, function() {
                        g = "--" == $scoreBox.html() ? 0 : "E" == $scoreBox.html() ? -par : Number($scoreBox.html()) - par;
                        var b = Number(g + f + par);
                        0 > b ? ($scoreBox.html(b), a.Controller.scorecardHoleScoreList.formatScoreEntry(b, scoreSel)) : 0 === b ? ($scoreBox.html("E"), 
                        a.Controller.scorecardHoleScoreList.formatScoreEntry("E", scoreSel)) : ($scoreBox.html("+" + b), 
                        a.Controller.scorecardHoleScoreList.formatScoreEntry(b, scoreSel)), $scoreBox.stop().animate({
                            fontSize: "40px"
                        }, 200), a.Controller.scorecardHoleScoreList.updateTotalScoreForPlayer(c.player), 
                        b = null;
                    });
                }, 100);
            });
        },
        resetDataView: function() {
            e("#score-count").val(1), e(".score-data-item-list li").removeClass("transparent").removeClass("selected-scoring-item"), 
            this.unsetScoringRule();
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        highlightItem: function(a) {
            setTimeout(function() {
                e(".topcoat-button div").css({
                    "-webkit-transform": "scale3d(1.0, 1.0, 1)"
                }), e(".topcoat-button").removeClass("score-choice-button-active"), e(a.target).closest(".topcoat-button div").css({
                    "-webkit-transform": "scale3d(0.9, 0.9, 1)"
                }), e(a.target).closest(".topcoat-button").addClass("score-choice-button-active");
            }, 0);
        },
        showDrinksClicked: function() {
            var c = this;
            a.Controller.getRulesForScoring("drink").then(function(a) {
                b.MainApp.Main.Controller.showSpinner(), c.dataViewList.collection = a, c.dataViewList.render(), 
                c.createDataScrollView(), e(".subheader-name").html("Drink Name");
            });
        },
        showBonusesClicked: function() {
            var c = this;
            a.Controller.getRulesForScoring("bonus").then(function(a) {
                b.MainApp.Main.Controller.showSpinner(), c.dataViewList.collection = a, c.dataViewList.render(), 
                c.createDataScrollView(), e(".subheader-name").html("Bonus Name");
            });
        },
        showPenaltiesClicked: function() {
            var c = this;
            a.Controller.getRulesForScoring("penalty").then(function(a) {
                b.MainApp.Main.Controller.showSpinner(), c.dataViewList.collection = a, c.dataViewList.render(), 
                c.createDataScrollView(), e(".subheader-name").html("Penalty Name");
            });
        },
        scoringBreakdownClicked: function() {
            a.Controller.showScoringBreakdown(this.player, this.hole, e("#scorecard-total-score").html());
        },
        setScoringRuleSelected: function(a, b) {
            var c = this;
            c.rule = b, setTimeout(function() {
                c.enableAddScoreBtn(), c.showAddRemoveButtons(a);
            }, 0);
        },
        unsetScoringRule: function(a) {
            var b = this;
            this.rule = null, setTimeout(function() {
                b.disableAddScoreBtn(), b.hideAddRemoveButtons(a);
            }, 0);
        },
        enableAddScoreBtn: function() {
            setTimeout(function() {
                e("#sc-enter-score-data").show("fast"), e(".score-save-button").show("fast");
            }, 0);
        },
        disableAddScoreBtn: function() {
            setTimeout(function() {
                e("#sc-enter-score-data").hide("fast"), e(".score-save-button").hide("fast");
            }, 0);
        },
        incrementScoreCount: function() {
            var a = e("#score-count");
            ct = a.val(), ct++, this.animateCount(ct), ct = null;
        },
        decrementScoreCount: function() {
            var a = e("#score-count");
            ct = a.val(), ct > 0 && ct--, this.animateCount(ct), ct = null;
        },
        animateCount: function(a) {
            var b = e("#score-count");
            setTimeout(function() {
                b.stop().animate({
                    fontSize: "20px"
                }, 50, null, function() {
                    b.val(a), b.stop().animate({
                        fontSize: "18px"
                    }, 100);
                });
            }, 0);
        },
        showAddRemoveButtons: function(a) {
            var b = this;
            setTimeout(function() {
                var c = e(a.target).is(".data-score-row") === !0 ? e(a.target).find(".data-score-item-name") : e(a.target).closest(".data-score-item-name"), d = (c.next(), 
                c.next("table")), f = d.find("#remove-score");
                "undefined" != typeof f && f && f !== [] && f !== {} && (b.didAnimateIn = !1, f.isOnScreen() || (b.didAnimateIn = !0, 
                b.w = c.width(), b.e = a, c.animate({
                    width: "145%"
                }, "fast")), f = null);
            }, 100);
        },
        hideAddRemoveButtons: function() {
            var a = this;
            setTimeout(function() {
                "undefined" != typeof a.e && a.didAnimateIn === !0 && e(".data-score-item-name").animate({
                    width: "" + a.w
                }, "fast");
            }, 0);
        },
        createDataScrollView: function(a, b, c) {
            var d = this;
            e(".score-data-item-list").css("visibility", "hidden"), setTimeout(function() {
                "undefined" != typeof d.sv && (d.sv = null), d.sv = new IScroll("#iscroll-score-data-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: b
                }), d.sv.enabled = !0, d.refreshScrollView(), e.isFunction(c) && c();
            }, 100);
        },
        refreshScrollView: function() {
            var a = this;
            setTimeout(function() {
                function c(a) {
                    return !e.trim(a.html());
                }
                var d = parseInt(e("#data-region").css("height"), 10), f = parseInt(e(".form-data-table-header").css("height"), 10), g = parseInt(e(".form-data-table-footer").css("height"), 10), h = parseInt(e("#data-region").css("width"), 10), i = d - (f + g);
                e("#iscroll-score-data-wrapper").css("height", i), e(".form-data-row").css("height", i - 2);
                var j = e(".rs-list").height();
                a.sv.maxScrollY = -j + f + g - 32;
                var k = "" + h - 110;
                e(".data-score-item-name").css("width", k), j = null, a.sv.refresh(), e(".score-data-item-list").css("visibility", "visible"), 
                e("#score-count").val(1), a.attempts = 1, setTimeout(function() {
                    a.attempts > 0 && c(e(".score-data-item-list")) && (console.log("scrollview did not populate correctly; refreshing..."), 
                    a.sv.refresh(), a.attempts = a.attempts - 1), setTimeout(function() {
                        e(".score-data-item-list li:even").addClass("lt-lt-gray"), e("#score-edit-heading").html("Enter " + a.player.get("displayName") + "'s score for hole #" + a.hole.get("holeNum"));
                    }, 0);
                }, 200), a.disableAddScoreBtn(), b.MainApp.Main.Controller.hideSpinner();
            }, 500);
        },
        showDataView: function(c, d, f) {
            b.MainApp.Main.Controller.showSpinner();
            var g = this, h = g.collection;
            g.delegateEvents(), g.player = d, setTimeout(function() {
                e(".topcoat-button").removeClass("score-choice-button-active"), e(".score-drink-button").addClass("score-choice-button-active"), 
                e(".subheader-name").html("Drink Name"), e("#scorecard-total-score").html(e("tr#p" + g.player.get("playerNum") + ' [data-id="' + f + '"]').html());
            }, 0), a.Controller.getHoleModel(f).then(function(c) {
                g.hole = c, g.dataViewList = new a.DataScoreTypeList({
                    collection: h,
                    itemView: a.DataScoreTypeRowView
                }), g.dataViewList.render();
                var f = e("#score-edit-heading"), i = e("#data-region");
                g.model = d, setTimeout(function() {
                    g.createDataScrollView(null, 0, function() {
                        setTimeout(function() {
                            g.refreshScrollView();
                        }, 0), g.disableAddScoreBtn(), setTimeout(function() {
                            f.html("Enter " + g.player.get("displayName") + "'s score for hole #" + g.hole.get("holeNum"));
                        }, 0), setTimeout(function() {
                            i.slideDown(200, function() {
                                e("#player-region").css("opacity", "0.4"), e("#iscroll-scorecard-wrapper").css("opacity", "0.4"), 
                                b.MainApp.Main.Controller.hideSpinner(), i = null;
                            });
                        }, 300);
                    });
                }, 200);
            }, function(a) {
                console.log("failed to get hole: " + JSON.stringify(a)), b.MainApp.Main.Controller.hideSpinner();
            });
        },
        hideDataView: function(a) {
            this.hideSelf(a, "#data-region");
        }
    }), a.ScorecardScoringBreakdownView = a.ScorecardDataViewParent.extend({
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-scoring-breakdown-data"));
        },
        initialize: function(a) {
            var b = this;
            b.dataViewIsShowing = !1, b.player = a.player, b.hole = a.hole, b.currentScore = a.currentScore, 
            b.scores = a.scores;
        },
        onRender: function() {
            this.showScoringBreakdown();
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .score-drink-button": "showDrinksClicked",
                "touchend .score-bonus-button": "showBonusesClicked",
                "touchend .score-penalty-button": "showPenaltiesClicked",
                "touchend .score-cancel-button": "backToDataEntryView",
                "touchend #sc-back-to-scorecard": "backToScorecard",
                "touchstart #sc-back-to-scorecard": "selectItem"
            }) : f.extend(a, {
                "click .score-drink-button": "showDrinksClicked",
                "click .score-bonus-button": "showBonusesClicked",
                "click .score-penalty-button": "showPenaltiesClicked",
                "click .score-cancel-button": "backToDataEntryView",
                "click #sc-back-to-scorecard": "backToScorecard",
                "mousedown #sc-back-to-scorecard": "selectItem"
            }), a;
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        highlightItem: function(a) {
            setTimeout(function() {
                e(".topcoat-button div").css({
                    "-webkit-transform": "scale3d(1.0, 1.0, 1)"
                }), e(".topcoat-button").removeClass("score-choice-button-active"), e(a.target).closest(".topcoat-button div").css({
                    "-webkit-transform": "scale3d(0.9, 0.9, 1)"
                }), e(a.target).closest(".topcoat-button").addClass("score-choice-button-active");
            }, 0);
        },
        setScoringRuleSelected: function(a, b) {
            var c = this;
            c.rule = b, setTimeout(function() {
                c.enableAddScoreBtn(), c.showAddRemoveButtons(a);
            }, 0);
        },
        unsetScoringRule: function(a) {
            var b = this;
            this.rule = null, setTimeout(function() {
                b.disableAddScoreBtn(), b.hideAddRemoveButtons(a);
            }, 0);
        },
        showDrinksClicked: function() {
            console.log("ScorecardBreakdown showDrinksClicked:");
        },
        showBonusesClicked: function() {
            console.log("ScorecardBreakdown showBonusesClicked:");
        },
        showPenaltiesClicked: function() {
            console.log("ScorecardBreakdown showPenaltiesClicked:");
            var c = this;
            a.Controller.getRulesForScoring("penalty").then(function(a) {
                b.MainApp.Main.Controller.showSpinner(), c.dataViewList.collection = a, c.dataViewList.render(), 
                c.createDataScrollView(), e(".subheader-name").html("Penalty Name");
            });
        },
        animateCount: function(a) {
            var b = e("#score-count");
            setTimeout(function() {
                b.stop().animate({
                    fontSize: "20px"
                }, 50, null, function() {
                    b.val(a), b.stop().animate({
                        fontSize: "18px"
                    }, 100);
                });
            }, 0);
        },
        showAddRemoveButtons: function(a) {
            var b = this;
            setTimeout(function() {
                var c = e(a.target).is(".data-score-row") === !0 ? e(a.target).find(".data-score-item-name") : e(a.target).closest(".data-score-item-name"), d = (c.next(), 
                c.next("table")), f = d.find("#remove-score");
                "undefined" != typeof f && f && f !== [] && f !== {} && (b.didAnimateIn = !1, f.isOnScreen() || (b.didAnimateIn = !0, 
                b.w = c.width(), b.e = a, c.animate({
                    width: "145%"
                }, "fast")), f = null);
            }, 100);
        },
        hideAddRemoveButtons: function() {
            var a = this;
            setTimeout(function() {
                "undefined" != typeof a.e && a.didAnimateIn === !0 && e(".data-score-item-name").animate({
                    width: "" + a.w
                }, "fast");
            }, 0);
        },
        createDataScrollView: function(a, b, c) {
            console.log("ScoringBreakdown createDataScrollView:");
            var d = this;
            e(".score-data-item-list").css("visibility", "hidden"), setTimeout(function() {
                "undefined" != typeof d.sv && (d.sv = null), d.sv = new IScroll("#iscroll-score-data-wrapper", {
                    mouseWheel: !0,
                    tap: !0,
                    bottomOffset: b
                }), d.sv.enabled = !0, d.refreshScrollView(), e.isFunction(c) && c();
            }, 100);
        },
        refreshScrollView: function() {
            console.log("ScoringBreakdown refreshScrollview:");
            var a = this;
            setTimeout(function() {
                function c(a) {
                    return !e.trim(a.html());
                }
                var d = parseInt(e("#data-region").css("height"), 10), f = parseInt(e(".form-data-table-header").css("height"), 10), g = parseInt(e(".form-data-table-footer").css("height"), 10), h = parseInt(e("#data-region").css("width"), 10), i = d - (f + g);
                e("#iscroll-score-data-wrapper").css("height", i), e(".form-data-row").css("height", i - 2);
                var j = e(".rs-list").height();
                a.sv.maxScrollY = -j + f + g - 32;
                var k = "" + h - 110;
                e(".data-score-item-name").css("width", k), j = null, a.sv.refresh(), e(".score-data-item-list").css("visibility", "visible"), 
                e("#score-count").val(1), a.attempts = 1, setTimeout(function() {
                    a.attempts > 0 && c(e(".score-data-item-list")) && (console.log("scrollview did not populate correctly; refreshing..."), 
                    a.sv.refresh(), a.attempts = a.attempts - 1), setTimeout(function() {
                        e(".score-data-item-list li:even").addClass("lt-lt-gray");
                    }, 0);
                }, 200), a.disableAddScoreBtn(), b.MainApp.Main.Controller.hideSpinner();
            }, 500);
        },
        showScoringBreakdown: function() {
            b.MainApp.Main.Controller.showSpinner();
            var c = this;
            setTimeout(function() {
                var d = e("#score-breakdown-heading"), f = e("#breakdown-region");
                f.slideDown(200, function() {
                    e("#player-region").css("opacity", "0.4"), e("#iscroll-scorecard-wrapper").css("opacity", "0.4"), 
                    b.MainApp.Main.Controller.hideSpinner(), c.dataViewIsShowing = !0, c.delegateEvents(), 
                    d.html("Hole #" + c.hole.get("holeNum") + " Scoring Breakdown for " + c.player.get("displayName")), 
                    e("#breakdown-total-score").html(c.currentScore), f = null, c.buildScoringBreakdownCollection().then(function() {
                        console.log("s.scoresWithRules: " + JSON.stringify(c.scoresWithRules)), c.breakdownViewList = new a.DataScoreTypeList({
                            collection: c.scoresWithRules,
                            itemView: a.BreakdownItemRowView
                        }), c.breakdownViewList.render();
                    });
                });
            }, 300);
        },
        buildScoringBreakdownCollection: function() {
            var c = this, d = [];
            return c.scoresWithRules = new b.Entities.ScorecardScoreCollection(), f.each(c.scores, function(b) {
                d.push(a.Controller.getRuleModelbyId(b.get("rule").id).then(function(a) {
                    console.log("rule returned: " + JSON.stringify(a)), b.ruleName = a.name, b.ruleType = a.type, 
                    b.ruleValue = a.value, c.scoresWithRules.add(b), console.log("scores now: " + JSON.stringify(c.scoresWithRules));
                }, function(a) {
                    console.log("e: " + JSON.stringify(a));
                }));
            }), Parse.Promise.when(d);
        },
        hideScoringBreakdown: function(a) {
            this.hideSelf(a, "#breakdown-region");
        },
        backToScorecard: function(a) {
            a.preventDefault(), a.stopImmediatePropagation(), this.hideScoringBreakdown();
        },
        backToDataEntryView: function(b) {
            b.preventDefault(), b.stopImmediatePropagation();
            var c = this;
            this.hideScoringBreakdown(function() {
                a.Controller.showEnterScoreDataView(b, c.player, c.hole.get("holeNum"));
            });
        }
    }), a.DataScoreTypeList = c.Marionette.CompositeView.extend({
        el: "#iscroll-score-data-wrapper",
        template: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-data-score-list"));
        },
        itemViewContainer: ".score-data-item-list",
        modelEvents: {
            change: "modelChanged"
        },
        collectionEvents: {
            add: "modelAdded"
        },
        modelChanged: function() {
            console.log("Scorecard.DataScoreTypeList modelChanged");
        },
        modelAdded: function() {
            console.log("Scorecard.DataScoreTypeList modelAdded");
        },
        initialize: function(a) {
            var b = this;
            console.log("Scorecard.DataScoreTypeList initialize"), b.collection = a.collection, 
            b.delegateEvents(), f.bindAll(this);
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        }
    });
}), BGS.module("ScorecardApp.Scorecard", function(a, b, c, d, e, f) {
    a.PlayerRowView = c.Marionette.ItemView.extend({
        tagName: "li",
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-player-list-item"));
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        initialize: function() {},
        onRender: function() {}
    }), a.HoleNameRowView = c.Marionette.ItemView.extend({
        tagName: "td",
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-hole-name-list-item"));
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        initialize: function() {}
    }), a.HoleScoreRowView = c.Marionette.ItemView.extend({
        tagName: "tr",
        id: function() {
            return "p" + this.model.get("playerNum");
        },
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-hole-score-list-item"));
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchend .scorecard-hole-score-number": "enterScoreTouched",
                "touchstart .scorecard-hole-score-number": "setShouldTakeAction",
                "touchmove .scorecard-hole-score-number": "preventTakingAction"
            }) : f.extend(a, {
                "click .scorecard-hole-score-number": "enterScoreTouched",
                "mousedown .scorecard-hole-score-number": "setShouldTakeAction",
                "mousemove .scorecard-hole-score-number": "preventTakingAction"
            }), a;
        },
        enterScoreTouched: function(b) {
            if (this.shouldTakeAction === !0) {
                b.preventDefault();
                var c = e(b.currentTarget).data("id");
                a.Controller.showEnterScoreDataView(b, this.model, c), setTimeout(function() {
                    e(b.target).closest("td").removeClass("scorecard-hole-score-number-active");
                }, 500);
            }
        },
        setShouldTakeAction: function(a) {
            e("td").removeClass("scorecard-hole-score-number-active"), this.shouldTakeAction = !0;
            var b = this;
            setTimeout(function() {
                b.shouldTakeAction === !0 && e(a.target).closest("td").addClass("scorecard-hole-score-number-active");
            }, 100);
        },
        preventTakingAction: function() {
            e("td").removeClass("scorecard-hole-score-number-active"), this.shouldTakeAction = !1;
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        initialize: function() {},
        onRender: function() {}
    }), a.DataScoreTypeRowView = c.Marionette.ItemView.extend({
        model: b.Entities.Rule,
        tagName: "li",
        className: "rs-options-header font-size-20",
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-data-score-list-item"));
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        initialize: function() {},
        onRender: function() {},
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchstart .data-score-row": "selectScoringRuleTouched",
                "touchend #add-score": "incrementScoreTouched",
                "touchend #remove-score": "decrementScoreTouched",
                "touchmove .data-score-row": "scrollViewIsScrolling"
            }) : f.extend(a, {
                "mousedown .data-score-row": "selectScoringRuleTouched",
                "click #add-score": "incrementScoreTouched",
                "click #remove-score": "decrementScoreTouched",
                "mousemove .data-score-row": "scrollViewIsScrolling"
            }), a;
        },
        incrementScoreTouched: function(b) {
            b.preventDefault(), a.Controller.enterScoreDataView.incrementScoreCount();
        },
        decrementScoreTouched: function(b) {
            b.preventDefault(), a.Controller.enterScoreDataView.decrementScoreCount();
        },
        selectScoringRuleTouched: function(b) {
            if (!e(b.target).closest("li").hasClass("selected-scoring-item")) {
                var c = this;
                c.isScrolling = !1, e(".score-data-item-list li").removeClass("transparent").removeClass("selected-scoring-item"), 
                a.Controller.enterScoreDataView.unsetScoringRule(b), "" !== b.target.className && setTimeout(function() {
                    c.isScrolling === !1 && (e(".score-data-item-list li").addClass("transparent").removeClass("selected-scoring-item"), 
                    e(b.target).closest("li").removeClass("transparent").addClass("selected-scoring-item"), 
                    a.Controller.enterScoreDataView.setScoringRuleSelected(b, c.model));
                }, 200);
            }
        },
        scrollViewIsScrolling: function() {
            this.isScrolling = !0;
        }
    }), a.BreakdownItemRowView = c.Marionette.ItemView.extend({
        model: b.Entities.Score,
        tagName: "li",
        className: "rs-options-header font-size-20",
        getTemplate: function() {
            return f.template(b.Utilities.templateLoader.get("scorecard-breakdown-list-item"));
        },
        remove: function() {
            this.undelegateEvents(), this.unbind();
        },
        initialize: function(a) {
            console.log("options for item view: " + JSON.stringify(a));
        },
        onRender: function() {
            console.log("item view onRender");
        },
        events: function() {
            var a = {};
            return b.Utilities.isMobileDevice() ? f.extend(a, {
                "touchstart .data-score-row": "selectScoringRuleTouched",
                "touchend #add-score": "incrementScoreTouched",
                "touchend #remove-score": "decrementScoreTouched",
                "touchmove .data-score-row": "scrollViewIsScrolling"
            }) : f.extend(a, {
                "mousedown .data-score-row": "selectScoringRuleTouched",
                "click #add-score": "incrementScoreTouched",
                "click #remove-score": "decrementScoreTouched",
                "mousemove .data-score-row": "scrollViewIsScrolling"
            }), a;
        },
        incrementScoreTouched: function(b) {
            b.preventDefault(), a.Controller.enterScoreDataView.incrementScoreCount();
        },
        decrementScoreTouched: function(b) {
            b.preventDefault(), a.Controller.enterScoreDataView.decrementScoreCount();
        },
        selectScoringRuleTouched: function(b) {
            if (!e(b.target).closest("li").hasClass("selected-scoring-item")) {
                var c = this;
                c.isScrolling = !1, e(".score-data-item-list li").removeClass("transparent").removeClass("selected-scoring-item"), 
                a.Controller.enterScoreDataView.unsetScoringRule(b), "" !== b.target.className && setTimeout(function() {
                    c.isScrolling === !1 && (e(".score-data-item-list li").addClass("transparent").removeClass("selected-scoring-item"), 
                    e(b.target).closest("li").removeClass("transparent").addClass("selected-scoring-item"), 
                    a.Controller.enterScoreDataView.setScoringRuleSelected(b, c.model));
                }, 200);
            }
        },
        scrollViewIsScrolling: function() {
            this.isScrolling = !0;
        }
    });
});